
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c70  08007c70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c78  08007c78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c78  08007c78  00017c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c7c  08007c7c  00017c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f0  20000070  08007cf0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004260  08007cf0  00024260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001340a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e67  00000000  00000000  000334aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  00036318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  00037068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195df  00000000  00000000  00037c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dde1  00000000  00000000  0005122f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b69c  00000000  00000000  0005f010  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea6ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  000ea728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a70 	.word	0x08007a70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007a70 	.word	0x08007a70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fac9 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f81d 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8a3 	bl	8000728 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80005e2:	f000 f881 	bl	80006e8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005e6:	f003 fbe7 	bl	8003db8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	for (uint8_t i = 0; i < 4; i++) {		// тестовое моргание диодом
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	e00b      	b.n	8000608 <main+0x38>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <main+0x44>)
 80005f6:	f001 f80e 	bl	8001616 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80005fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fe:	f000 fb5b 	bl	8000cb8 <HAL_Delay>
	for (uint8_t i = 0; i < 4; i++) {		// тестовое моргание диодом
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3301      	adds	r3, #1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d9f0      	bls.n	80005f0 <main+0x20>
	}

	Bootloader_Main();
 800060e:	f006 fa4d 	bl	8006aac <Bootloader_Main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0x42>
 8000614:	40020800 	.word	0x40020800

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fad2 	bl	8006bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <SystemClock_Config+0xcc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xcc>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000688:	230c      	movs	r3, #12
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800068c:	2360      	movs	r3, #96	; 0x60
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000694:	2305      	movs	r3, #5
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 ffd5 	bl	800164c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f8ab 	bl	8000802 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2103      	movs	r1, #3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fa2f 	bl	8001b2c <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d4:	f000 f895 	bl	8000802 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <MX_SDIO_SD_Init+0x3c>)
 80006f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <MX_SDIO_SD_Init+0x38>)
 8000712:	220a      	movs	r2, #10
 8000714:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	200000cc 	.word	0x200000cc
 8000724:	40012c00 	.word	0x40012c00

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_GPIO_Init+0xb8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <MX_GPIO_Init+0xb8>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xb8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_GPIO_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xb8>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0xb8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0xb8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xb8>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0xb8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_GPIO_Init+0xb8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_GPIO_Init+0xb8>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0xb8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0xbc>)
 80007b6:	f000 ff15 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xbc>)
 80007d4:	f000 fd84 	bl	80012e0 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020800 	.word	0x40020800

080007e8 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fec4 	bl	8000580 <ITM_SendChar>
	return ch;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000806:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x6>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a31      	ldr	r2, [pc, #196]	; (8000940 <HAL_SD_MspInit+0xe4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d15b      	bne.n	8000936 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b30      	ldr	r3, [pc, #192]	; (8000944 <HAL_SD_MspInit+0xe8>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <HAL_SD_MspInit+0xe8>)
 8000888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <HAL_SD_MspInit+0xe8>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <HAL_SD_MspInit+0xe8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a28      	ldr	r2, [pc, #160]	; (8000944 <HAL_SD_MspInit+0xe8>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <HAL_SD_MspInit+0xe8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <HAL_SD_MspInit+0xe8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a21      	ldr	r2, [pc, #132]	; (8000944 <HAL_SD_MspInit+0xe8>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <HAL_SD_MspInit+0xe8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80008d2:	f44f 7350 	mov.w	r3, #832	; 0x340
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008e4:	230c      	movs	r3, #12
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4816      	ldr	r0, [pc, #88]	; (8000948 <HAL_SD_MspInit+0xec>)
 80008f0:	f000 fcf6 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000906:	230c      	movs	r3, #12
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <HAL_SD_MspInit+0xf0>)
 8000912:	f000 fce5 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000916:	2330      	movs	r3, #48	; 0x30
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000926:	230c      	movs	r3, #12
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <HAL_SD_MspInit+0xf0>)
 8000932:	f000 fcd5 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40012c00 	.word	0x40012c00
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020400 	.word	0x40020400

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f96c 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e00a      	b.n	80009cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009b6:	f3af 8000 	nop.w
 80009ba:	4601      	mov	r1, r0
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf0      	blt.n	80009b6 <_read+0x12>
	}

return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e009      	b.n	8000a04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fef5 	bl	80007e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf1      	blt.n	80009f0 <_write+0x12>
	}
	return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_close>:

int _close(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d207      	bcs.n	8000ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab0:	f006 f864 	bl	8006b7c <__errno>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20020000 	.word	0x20020000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	2000008c 	.word	0x2000008c
 8000ae8:	20004260 	.word	0x20004260

08000aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <SystemInit+0x28>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <SystemInit+0x28>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SystemInit+0x28>)
 8000b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b06:	609a      	str	r2, [r3, #8]
#endif
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b1e:	e003      	b.n	8000b28 <LoopCopyDataInit>

08000b20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b26:	3104      	adds	r1, #4

08000b28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b30:	d3f6      	bcc.n	8000b20 <CopyDataInit>
  ldr  r2, =_sbss
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b34:	e002      	b.n	8000b3c <LoopFillZerobss>

08000b36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b38:	f842 3b04 	str.w	r3, [r2], #4

08000b3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b40:	d3f9      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b42:	f7ff ffd3 	bl	8000aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f006 f81f 	bl	8006b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fd41 	bl	80005d0 <main>
  bx  lr    
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b54:	08007c80 	.word	0x08007c80
  ldr  r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b5c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b60:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b64:	20004260 	.word	0x20004260

08000b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_Init+0x40>)
 8000b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_Init+0x40>)
 8000b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x40>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f963 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f83c 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fe34 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00

08000bb0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_DeInit+0x54>)
 8000bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bba:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_DeInit+0x54>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_DeInit+0x54>)
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_DeInit+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_DeInit+0x54>)
 8000bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_DeInit+0x54>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_DeInit+0x54>)
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_DeInit+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_DeInit+0x54>)
 8000bee:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_DeInit+0x54>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000bfa:	f000 f805 	bl	8000c08 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f939 	bl	8000eae <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 f90f 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000150 	.word	0x20000150

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000150 	.word	0x20000150

08000cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff ffee 	bl	8000ca0 <HAL_GetTick>
 8000cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d005      	beq.n	8000cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_Delay+0x40>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cde:	bf00      	nop
 8000ce0:	f7ff ffde 	bl	8000ca0 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d8f7      	bhi.n	8000ce0 <HAL_Delay+0x28>
  {
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff47 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff5c 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffb0 	bl	8000e1c <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_FLASH_Program+0xa0>)
 8000edc:	7e1b      	ldrb	r3, [r3, #24]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_FLASH_Program+0x1e>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e03b      	b.n	8000f5e <HAL_FLASH_Program+0x96>
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_FLASH_Program+0xa0>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ef0:	f000 f870 	bl	8000fd4 <FLASH_WaitForLastOperation>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d12b      	bne.n	8000f56 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d105      	bne.n	8000f10 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000f04:	783b      	ldrb	r3, [r7, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	68b8      	ldr	r0, [r7, #8]
 8000f0a:	f000 f919 	bl	8001140 <FLASH_Program_Byte>
 8000f0e:	e016      	b.n	8000f3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d105      	bne.n	8000f22 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000f16:	883b      	ldrh	r3, [r7, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	68b8      	ldr	r0, [r7, #8]
 8000f1c:	f000 f8ec 	bl	80010f8 <FLASH_Program_HalfWord>
 8000f20:	e00d      	b.n	8000f3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d105      	bne.n	8000f34 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	68b8      	ldr	r0, [r7, #8]
 8000f2e:	f000 f8c1 	bl	80010b4 <FLASH_Program_Word>
 8000f32:	e004      	b.n	8000f3e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f38:	68b8      	ldr	r0, [r7, #8]
 8000f3a:	f000 f88b 	bl	8001054 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f42:	f000 f847 	bl	8000fd4 <FLASH_WaitForLastOperation>
 8000f46:	4603      	mov	r3, r0
 8000f48:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_FLASH_Program+0xa4>)
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_FLASH_Program+0xa4>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_FLASH_Program+0xa0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000154 	.word	0x20000154
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_FLASH_Unlock+0x38>)
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da0b      	bge.n	8000f9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_FLASH_Unlock+0x38>)
 8000f84:	4a09      	ldr	r2, [pc, #36]	; (8000fac <HAL_FLASH_Unlock+0x3c>)
 8000f86:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_FLASH_Unlock+0x38>)
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <HAL_FLASH_Unlock+0x40>)
 8000f8c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_FLASH_Unlock+0x38>)
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	da01      	bge.n	8000f9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40023c00 	.word	0x40023c00
 8000fac:	45670123 	.word	0x45670123
 8000fb0:	cdef89ab 	.word	0xcdef89ab

08000fb4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_FLASH_Lock+0x1c>)
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_FLASH_Lock+0x1c>)
 8000fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <FLASH_WaitForLastOperation+0x78>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe6:	f7ff fe5b 	bl	8000ca0 <HAL_GetTick>
 8000fea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000fec:	e010      	b.n	8001010 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d00c      	beq.n	8001010 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <FLASH_WaitForLastOperation+0x38>
 8000ffc:	f7ff fe50 	bl	8000ca0 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	d201      	bcs.n	8001010 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e019      	b.n	8001044 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <FLASH_WaitForLastOperation+0x7c>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e8      	bne.n	8000fee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <FLASH_WaitForLastOperation+0x7c>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <FLASH_WaitForLastOperation+0x7c>)
 800102a:	2201      	movs	r2, #1
 800102c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <FLASH_WaitForLastOperation+0x7c>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800103a:	f000 f8a3 	bl	8001184 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
  
}  
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000154 	.word	0x20000154
 8001050:	40023c00 	.word	0x40023c00

08001054 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001054:	b490      	push	{r4, r7}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <FLASH_Program_DoubleWord+0x5c>)
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <FLASH_Program_DoubleWord+0x5c>)
 8001066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800106a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <FLASH_Program_DoubleWord+0x5c>)
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <FLASH_Program_DoubleWord+0x5c>)
 8001072:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001076:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <FLASH_Program_DoubleWord+0x5c>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <FLASH_Program_DoubleWord+0x5c>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800108a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800108e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	f04f 0400 	mov.w	r4, #0
 800109a:	0013      	movs	r3, r2
 800109c:	2400      	movs	r4, #0
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	3204      	adds	r2, #4
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc90      	pop	{r4, r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <FLASH_Program_Word+0x40>)
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <FLASH_Program_Word+0x40>)
 80010c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <FLASH_Program_Word+0x40>)
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <FLASH_Program_Word+0x40>)
 80010d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <FLASH_Program_Word+0x40>)
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <FLASH_Program_Word+0x40>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <FLASH_Program_HalfWord+0x44>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a0c      	ldr	r2, [pc, #48]	; (800113c <FLASH_Program_HalfWord+0x44>)
 800110a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800110e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <FLASH_Program_HalfWord+0x44>)
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	4a09      	ldr	r2, [pc, #36]	; (800113c <FLASH_Program_HalfWord+0x44>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <FLASH_Program_HalfWord+0x44>)
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <FLASH_Program_HalfWord+0x44>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	801a      	strh	r2, [r3, #0]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <FLASH_Program_Byte+0x40>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <FLASH_Program_Byte+0x40>)
 8001152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <FLASH_Program_Byte+0x40>)
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <FLASH_Program_Byte+0x40>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <FLASH_Program_Byte+0x40>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <FLASH_Program_Byte+0x40>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	78fa      	ldrb	r2, [r7, #3]
 8001170:	701a      	strb	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00

08001184 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <FLASH_SetErrorCode+0xc8>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	4a2b      	ldr	r2, [pc, #172]	; (800124c <FLASH_SetErrorCode+0xc8>)
 800119e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 80011a2:	2210      	movs	r2, #16
 80011a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <FLASH_SetErrorCode+0xc8>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	4a24      	ldr	r2, [pc, #144]	; (800124c <FLASH_SetErrorCode+0xc8>)
 80011bc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 80011c0:	2220      	movs	r2, #32
 80011c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d008      	beq.n	80011e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <FLASH_SetErrorCode+0xc8>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	4a1c      	ldr	r2, [pc, #112]	; (800124c <FLASH_SetErrorCode+0xc8>)
 80011da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 80011de:	2240      	movs	r2, #64	; 0x40
 80011e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d008      	beq.n	8001200 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <FLASH_SetErrorCode+0xc8>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <FLASH_SetErrorCode+0xc8>)
 80011f8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d009      	beq.n	8001220 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <FLASH_SetErrorCode+0xc8>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <FLASH_SetErrorCode+0xc8>)
 8001216:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 800121a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <FLASH_SetErrorCode+0xc8>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <FLASH_SetErrorCode+0xc8>)
 8001236:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <FLASH_SetErrorCode+0xc4>)
 800123a:	2202      	movs	r2, #2
 800123c:	60da      	str	r2, [r3, #12]
  }
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40023c00 	.word	0x40023c00
 800124c:	20000154 	.word	0x20000154

08001250 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	e010      	b.n	800128e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d103      	bne.n	800127a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e009      	b.n	800128e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d103      	bne.n	8001288 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	e002      	b.n	800128e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001288:	f44f 7340 	mov.w	r3, #768	; 0x300
 800128c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 8001294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001298:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	490f      	ldr	r1, [pc, #60]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 80012ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <FLASH_Erase_Sector+0x8c>)
 80012ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ce:	6113      	str	r3, [r2, #16]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e159      	b.n	80015b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	f040 8148 	bne.w	80015aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00b      	beq.n	800133a <HAL_GPIO_Init+0x5a>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132e:	2b11      	cmp	r3, #17
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b12      	cmp	r3, #18
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0xfc>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b12      	cmp	r3, #18
 80013da:	d123      	bne.n	8001424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	08da      	lsrs	r2, r3, #3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3208      	adds	r2, #8
 80013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80a2 	beq.w	80015aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <HAL_GPIO_Init+0x2e4>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a55      	ldr	r2, [pc, #340]	; (80015c4 <HAL_GPIO_Init+0x2e4>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_GPIO_Init+0x2e4>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <HAL_GPIO_Init+0x2e8>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a48      	ldr	r2, [pc, #288]	; (80015cc <HAL_GPIO_Init+0x2ec>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x202>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a47      	ldr	r2, [pc, #284]	; (80015d0 <HAL_GPIO_Init+0x2f0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x1fe>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a46      	ldr	r2, [pc, #280]	; (80015d4 <HAL_GPIO_Init+0x2f4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x1fa>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a45      	ldr	r2, [pc, #276]	; (80015d8 <HAL_GPIO_Init+0x2f8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x1f6>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a44      	ldr	r2, [pc, #272]	; (80015dc <HAL_GPIO_Init+0x2fc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x1f2>
 80014ce:	2304      	movs	r3, #4
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014e2:	2300      	movs	r3, #0
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4934      	ldr	r1, [pc, #208]	; (80015c8 <HAL_GPIO_Init+0x2e8>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_GPIO_Init+0x300>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001526:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <HAL_GPIO_Init+0x300>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <HAL_GPIO_Init+0x300>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001550:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <HAL_GPIO_Init+0x300>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_GPIO_Init+0x300>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157a:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_GPIO_Init+0x300>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_GPIO_Init+0x300>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_GPIO_Init+0x300>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	f67f aea2 	bls.w	80012fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b8:	bf00      	nop
 80015ba:	3724      	adds	r7, #36	; 0x24
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40013800 	.word	0x40013800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001600:	e003      	b.n	800160a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	619a      	str	r2, [r3, #24]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	401a      	ands	r2, r3
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	429a      	cmp	r2, r3
 800162e:	d104      	bne.n	800163a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001638:	e002      	b.n	8001640 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e25b      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d075      	beq.n	8001756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800166a:	4ba3      	ldr	r3, [pc, #652]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b04      	cmp	r3, #4
 8001674:	d00c      	beq.n	8001690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001676:	4ba0      	ldr	r3, [pc, #640]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167e:	2b08      	cmp	r3, #8
 8001680:	d112      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	4b9d      	ldr	r3, [pc, #628]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800168e:	d10b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	4b99      	ldr	r3, [pc, #612]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d05b      	beq.n	8001754 <HAL_RCC_OscConfig+0x108>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d157      	bne.n	8001754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e236      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x74>
 80016b2:	4b91      	ldr	r3, [pc, #580]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a90      	ldr	r2, [pc, #576]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a8a      	ldr	r2, [pc, #552]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a87      	ldr	r2, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016e4:	4b84      	ldr	r3, [pc, #528]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a83      	ldr	r2, [pc, #524]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a80      	ldr	r2, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff facc 	bl	8000ca0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fac8 	bl	8000ca0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1fb      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xc0>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fab8 	bl	8000ca0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fab4 	bl	8000ca0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1e7      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0xe8>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d063      	beq.n	800182a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001776:	2b08      	cmp	r3, #8
 8001778:	d11c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e1bb      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4952      	ldr	r1, [pc, #328]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	e03a      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <HAL_RCC_OscConfig+0x2b0>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fa6d 	bl	8000ca0 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fa69 	bl	8000ca0 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e19c      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4940      	ldr	r1, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x2b0>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fa4c 	bl	8000ca0 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180c:	f7ff fa48 	bl	8000ca0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e17b      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d030      	beq.n	8001898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d016      	beq.n	800186c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_RCC_OscConfig+0x2b4>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fa2c 	bl	8000ca0 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff fa28 	bl	8000ca0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e15b      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x200>
 800186a:	e015      	b.n	8001898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x2b4>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fa15 	bl	8000ca0 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fa11 	bl	8000ca0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e144      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a0 	beq.w	80019e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10f      	bne.n	80018d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d121      	bne.n	8001926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff f9d7 	bl	8000ca0 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e011      	b.n	800191a <HAL_RCC_OscConfig+0x2ce>
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	42470000 	.word	0x42470000
 8001900:	42470e80 	.word	0x42470e80
 8001904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001908:	f7ff f9ca 	bl	8000ca0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0fd      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x4d4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x2f0>
 800192e:	4b7d      	ldr	r3, [pc, #500]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a7c      	ldr	r2, [pc, #496]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	e01c      	b.n	8001976 <HAL_RCC_OscConfig+0x32a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b05      	cmp	r3, #5
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x312>
 8001944:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a76      	ldr	r2, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	4b74      	ldr	r3, [pc, #464]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a73      	ldr	r2, [pc, #460]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x32a>
 800195e:	4b71      	ldr	r3, [pc, #452]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a70      	ldr	r2, [pc, #448]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b6e      	ldr	r3, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a6d      	ldr	r2, [pc, #436]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d015      	beq.n	80019aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f98f 	bl	8000ca0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff f98b 	bl	8000ca0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0bc      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ee      	beq.n	8001986 <HAL_RCC_OscConfig+0x33a>
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff f979 	bl	8000ca0 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f975 	bl	8000ca0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0a6      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ee      	bne.n	80019b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019da:	4b52      	ldr	r3, [pc, #328]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a51      	ldr	r2, [pc, #324]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 80019e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8092 	beq.w	8001b14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d05c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d141      	bne.n	8001a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <HAL_RCC_OscConfig+0x4dc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f949 	bl	8000ca0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f945 	bl	8000ca0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e078      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	019b      	lsls	r3, r3, #6
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	061b      	lsls	r3, r3, #24
 8001a54:	4933      	ldr	r1, [pc, #204]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f91e 	bl	8000ca0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff f91a 	bl	8000ca0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e04d      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x41c>
 8001a86:	e045      	b.n	8001b14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_RCC_OscConfig+0x4dc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f907 	bl	8000ca0 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f903 	bl	8000ca0 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e036      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x44a>
 8001ab4:	e02e      	b.n	8001b14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e029      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_RCC_OscConfig+0x4d8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d115      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d10d      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d106      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40007000 	.word	0x40007000
 8001b24:	40023800 	.word	0x40023800
 8001b28:	42470060 	.word	0x42470060

08001b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0cc      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b68      	ldr	r3, [pc, #416]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d90c      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b65      	ldr	r3, [pc, #404]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0b8      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	494d      	ldr	r1, [pc, #308]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d044      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d119      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e07f      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bea:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e06f      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e067      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f023 0203 	bic.w	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4934      	ldr	r1, [pc, #208]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c1c:	f7ff f840 	bl	8000ca0 <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c24:	f7ff f83c 	bl	8000ca0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e04f      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 020c 	and.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1eb      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d20c      	bcs.n	8001c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e032      	b.n	8001cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4916      	ldr	r1, [pc, #88]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cb2:	f000 f821 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001cb6:	4601      	mov	r1, r0
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe ffa0 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	08007b34 	.word	0x08007b34
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d007      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x32>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d008      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x38>
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 808d 	bne.w	8001e3e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d26:	60bb      	str	r3, [r7, #8]
       break;
 8001d28:	e08c      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d2c:	60bb      	str	r3, [r7, #8]
      break;
 8001d2e:	e089      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d30:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d023      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	f04f 0400 	mov.w	r4, #0
 8001d50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	ea03 0501 	and.w	r5, r3, r1
 8001d5c:	ea04 0602 	and.w	r6, r4, r2
 8001d60:	4a3d      	ldr	r2, [pc, #244]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d62:	fb02 f106 	mul.w	r1, r2, r6
 8001d66:	2200      	movs	r2, #0
 8001d68:	fb02 f205 	mul.w	r2, r2, r5
 8001d6c:	440a      	add	r2, r1
 8001d6e:	493a      	ldr	r1, [pc, #232]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d70:	fba5 0101 	umull	r0, r1, r5, r1
 8001d74:	1853      	adds	r3, r2, r1
 8001d76:	4619      	mov	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f04f 0400 	mov.w	r4, #0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4623      	mov	r3, r4
 8001d82:	f7fe fa7d 	bl	8000280 <__aeabi_uldivmod>
 8001d86:	4603      	mov	r3, r0
 8001d88:	460c      	mov	r4, r1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	e049      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	f04f 0400 	mov.w	r4, #0
 8001d98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	ea03 0501 	and.w	r5, r3, r1
 8001da4:	ea04 0602 	and.w	r6, r4, r2
 8001da8:	4629      	mov	r1, r5
 8001daa:	4632      	mov	r2, r6
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	f04f 0400 	mov.w	r4, #0
 8001db4:	0154      	lsls	r4, r2, #5
 8001db6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dba:	014b      	lsls	r3, r1, #5
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	1b49      	subs	r1, r1, r5
 8001dc2:	eb62 0206 	sbc.w	r2, r2, r6
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f04f 0400 	mov.w	r4, #0
 8001dce:	0194      	lsls	r4, r2, #6
 8001dd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dd4:	018b      	lsls	r3, r1, #6
 8001dd6:	1a5b      	subs	r3, r3, r1
 8001dd8:	eb64 0402 	sbc.w	r4, r4, r2
 8001ddc:	f04f 0100 	mov.w	r1, #0
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	00e2      	lsls	r2, r4, #3
 8001de6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dea:	00d9      	lsls	r1, r3, #3
 8001dec:	460b      	mov	r3, r1
 8001dee:	4614      	mov	r4, r2
 8001df0:	195b      	adds	r3, r3, r5
 8001df2:	eb44 0406 	adc.w	r4, r4, r6
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	02a2      	lsls	r2, r4, #10
 8001e00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e04:	0299      	lsls	r1, r3, #10
 8001e06:	460b      	mov	r3, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f04f 0400 	mov.w	r4, #0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	f7fe fa32 	bl	8000280 <__aeabi_uldivmod>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	60bb      	str	r3, [r7, #8]
      break;
 8001e3c:	e002      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e40:	60bb      	str	r3, [r7, #8]
      break;
 8001e42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e44:	68bb      	ldr	r3, [r7, #8]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	017d7840 	.word	0x017d7840

08001e5c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001e62:	f7fe ff1d 	bl	8000ca0 <HAL_GetTick>
 8001e66:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7fe ff13 	bl	8000ca0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0a7      	b.n	8001fd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001e94:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a51      	ldr	r2, [pc, #324]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ea0:	f7fe fefe 	bl	8000ca0 <HAL_GetTick>
 8001ea4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eae:	f7fe fef7 	bl	8000ca0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e089      	b.n	8001fd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001ec4:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ed0:	f7fe fee6 	bl	8000ca0 <HAL_GetTick>
 8001ed4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001ed6:	4b42      	ldr	r3, [pc, #264]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a41      	ldr	r2, [pc, #260]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001edc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7fe fedc 	bl	8000ca0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e070      	b.n	8001fd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f02:	f7fe fecd 	bl	8000ca0 <HAL_GetTick>
 8001f06:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a34      	ldr	r2, [pc, #208]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f12:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f16:	f7fe fec3 	bl	8000ca0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e057      	b.n	8001fd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001f34:	f7fe feb4 	bl	8000ca0 <HAL_GetTick>
 8001f38:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f44:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f48:	f7fe feaa 	bl	8000ca0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e03e      	b.n	8001fd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_RCC_DeInit+0x188>)
 8001f6a:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <HAL_RCC_DeInit+0x18c>)
 8001f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f7a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001f7e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f8a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f92:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8001f96:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_RCC_DeInit+0x184>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fba:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_DeInit+0x190>)
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <HAL_RCC_DeInit+0x194>)
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCC_DeInit+0x198>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fe26 	bl	8000c18 <HAL_InitTick>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	04003010 	.word	0x04003010
 8001fe8:	20003010 	.word	0x20003010
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e022      	b.n	8002050 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe fc1d 	bl	800085c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f814 	bl	8002058 <HAL_SD_InitCard>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00a      	b.n	8002050 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af04      	add	r7, sp, #16
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002074:	2376      	movs	r3, #118	; 0x76
 8002076:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681d      	ldr	r5, [r3, #0]
 800207c:	466c      	mov	r4, sp
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002090:	4628      	mov	r0, r5
 8002092:	f001 f92d 	bl	80032f0 <SDIO_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800209c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e031      	b.n	800210c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_SD_InitCard+0xbc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 f965 	bl	8003382 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_SD_InitCard+0xbc>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 ff00 	bl	8002ec4 <SD_PowerON>
 80020c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e013      	b.n	800210c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fe1f 	bl	8002d28 <SD_InitCard>
 80020ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bdb0      	pop	{r4, r5, r7, pc}
 8002114:	422580a0 	.word	0x422580a0

08002118 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b092      	sub	sp, #72	; 0x48
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002126:	f7fe fdbb 	bl	8000ca0 <HAL_GetTick>
 800212a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e1d9      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	f040 81cc 	bne.w	80024f0 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800215e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	441a      	add	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	429a      	cmp	r2, r3
 800216a:	d907      	bls.n	800217c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e1c0      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2203      	movs	r2, #3
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	2b01      	cmp	r3, #1
 8002192:	d002      	beq.n	800219a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 f980 	bl	80034a8 <SDMMC_CmdBlockLength>
 80021a8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80021aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00f      	beq.n	80021d0 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a9b      	ldr	r2, [pc, #620]	; (8002424 <HAL_SD_ReadBlocks+0x30c>)
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021be:	431a      	orrs	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e196      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295
 80021d4:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	025b      	lsls	r3, r3, #9
 80021da:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80021dc:	2390      	movs	r3, #144	; 0x90
 80021de:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f107 0214 	add.w	r2, r7, #20
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f001 f92a 	bl	8003450 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d90a      	bls.n	8002218 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2202      	movs	r2, #2
 8002206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800220e:	4618      	mov	r0, r3
 8002210:	f001 f98e 	bl	8003530 <SDMMC_CmdReadMultiBlock>
 8002214:	6478      	str	r0, [r7, #68]	; 0x44
 8002216:	e009      	b.n	800222c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002224:	4618      	mov	r0, r3
 8002226:	f001 f961 	bl	80034ec <SDMMC_CmdReadSingleBlock>
 800222a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800222c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800222e:	2b00      	cmp	r3, #0
 8002230:	d012      	beq.n	8002258 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7b      	ldr	r2, [pc, #492]	; (8002424 <HAL_SD_ReadBlocks+0x30c>)
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800223e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e152      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800225c:	e061      	b.n	8002322 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d03c      	beq.n	80022e6 <HAL_SD_ReadBlocks+0x1ce>
 800226c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d039      	beq.n	80022e6 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002272:	2300      	movs	r3, #0
 8002274:	643b      	str	r3, [r7, #64]	; 0x40
 8002276:	e033      	b.n	80022e0 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f001 f862 	bl	8003346 <SDIO_ReadFIFO>
 8002282:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	b2da      	uxtb	r2, r3
 8002288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228e:	3301      	adds	r3, #1
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002294:	3b01      	subs	r3, #1
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b2da      	uxtb	r2, r3
 800229e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a4:	3301      	adds	r3, #1
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022aa:	3b01      	subs	r3, #1
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	3301      	adds	r3, #1
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	3b01      	subs	r3, #1
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	0e1b      	lsrs	r3, r3, #24
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d0:	3301      	adds	r3, #1
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	3b01      	subs	r3, #1
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80022da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022dc:	3301      	adds	r3, #1
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
 80022e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e2:	2b07      	cmp	r3, #7
 80022e4:	d9c8      	bls.n	8002278 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80022e6:	f7fe fcdb 	bl	8000ca0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d902      	bls.n	80022fc <HAL_SD_ReadBlocks+0x1e4>
 80022f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d112      	bne.n	8002322 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_SD_ReadBlocks+0x30c>)
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0ed      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002328:	f240 332a 	movw	r3, #810	; 0x32a
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d095      	beq.n	800225e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d022      	beq.n	8002386 <HAL_SD_ReadBlocks+0x26e>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d91f      	bls.n	8002386 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	2b03      	cmp	r3, #3
 800234c:	d01b      	beq.n	8002386 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f952 	bl	80035fc <SDMMC_CmdStopTransfer>
 8002358:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800235a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2f      	ldr	r2, [pc, #188]	; (8002424 <HAL_SD_ReadBlocks+0x30c>)
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	431a      	orrs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0bb      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d012      	beq.n	80023ba <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_SD_ReadBlocks+0x30c>)
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	f043 0208 	orr.w	r2, r3, #8
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0a1      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_SD_ReadBlocks+0x30c>)
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	f043 0202 	orr.w	r2, r3, #2
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e087      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d064      	beq.n	80024c6 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_SD_ReadBlocks+0x30c>)
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06d      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
 8002422:	bf00      	nop
 8002424:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f000 ff8a 	bl	8003346 <SDIO_ReadFIFO>
 8002432:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	b2da      	uxtb	r2, r3
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	3301      	adds	r3, #1
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002444:	3b01      	subs	r3, #1
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	b2da      	uxtb	r2, r3
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002454:	3301      	adds	r3, #1
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245a:	3b01      	subs	r3, #1
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	b2da      	uxtb	r2, r3
 8002464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002466:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	3301      	adds	r3, #1
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002470:	3b01      	subs	r3, #1
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	0e1b      	lsrs	r3, r3, #24
 8002478:	b2da      	uxtb	r2, r3
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002480:	3301      	adds	r3, #1
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002486:	3b01      	subs	r3, #1
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800248a:	f7fe fc09 	bl	8000ca0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002496:	429a      	cmp	r2, r3
 8002498:	d902      	bls.n	80024a0 <HAL_SD_ReadBlocks+0x388>
 800249a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249c:	2b00      	cmp	r3, #0
 800249e:	d112      	bne.n	80024c6 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_SD_ReadBlocks+0x3f0>)
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e01b      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_SD_ReadBlocks+0x3c2>
 80024d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1a6      	bne.n	8002428 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f240 523a 	movw	r2, #1338	; 0x53a
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e006      	b.n	80024fe <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3748      	adds	r7, #72	; 0x48
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	004005ff 	.word	0x004005ff

0800250c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b092      	sub	sp, #72	; 0x48
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800251a:	f7fe fbc1 	bl	8000ca0 <HAL_GetTick>
 800251e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e184      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	f040 8177 	bne.w	800283a <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	441a      	add	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	429a      	cmp	r2, r3
 800255e:	d907      	bls.n	8002570 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e16b      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2203      	movs	r2, #3
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b01      	cmp	r3, #1
 8002586:	d002      	beq.n	800258e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	025b      	lsls	r3, r3, #9
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002596:	4618      	mov	r0, r3
 8002598:	f000 ff86 	bl	80034a8 <SDMMC_CmdBlockLength>
 800259c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800259e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00f      	beq.n	80025c4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a9d      	ldr	r2, [pc, #628]	; (8002820 <HAL_SD_WriteBlocks+0x314>)
 80025aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e141      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
 80025c8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80025d0:	2390      	movs	r3, #144	; 0x90
 80025d2:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80025d8:	2300      	movs	r3, #0
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80025dc:	2301      	movs	r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f107 0218 	add.w	r2, r7, #24
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 ff30 	bl	8003450 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d90a      	bls.n	800260c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002602:	4618      	mov	r0, r3
 8002604:	f000 ffd8 	bl	80035b8 <SDMMC_CmdWriteMultiBlock>
 8002608:	6478      	str	r0, [r7, #68]	; 0x44
 800260a:	e009      	b.n	8002620 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2210      	movs	r2, #16
 8002610:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002618:	4618      	mov	r0, r3
 800261a:	f000 ffab 	bl	8003574 <SDMMC_CmdWriteSingleBlock>
 800261e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002622:	2b00      	cmp	r3, #0
 8002624:	d012      	beq.n	800264c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7d      	ldr	r2, [pc, #500]	; (8002820 <HAL_SD_WriteBlocks+0x314>)
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0fd      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002650:	e065      	b.n	800271e <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d040      	beq.n	80026e2 <HAL_SD_WriteBlocks+0x1d6>
 8002660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d03d      	beq.n	80026e2 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002666:	2300      	movs	r3, #0
 8002668:	643b      	str	r3, [r7, #64]	; 0x40
 800266a:	e037      	b.n	80026dc <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	3301      	adds	r3, #1
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267a:	3b01      	subs	r3, #1
 800267c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	021a      	lsls	r2, r3, #8
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	3301      	adds	r3, #1
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002692:	3b01      	subs	r3, #1
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	041a      	lsls	r2, r3, #16
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	3301      	adds	r3, #1
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80026a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026aa:	3b01      	subs	r3, #1
 80026ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	061a      	lsls	r2, r3, #24
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80026ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026bc:	3301      	adds	r3, #1
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80026c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c2:	3b01      	subs	r3, #1
 80026c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f107 0214 	add.w	r2, r7, #20
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fe45 	bl	8003360 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80026d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d8:	3301      	adds	r3, #1
 80026da:	643b      	str	r3, [r7, #64]	; 0x40
 80026dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026de:	2b07      	cmp	r3, #7
 80026e0:	d9c4      	bls.n	800266c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80026e2:	f7fe fadd 	bl	8000ca0 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d902      	bls.n	80026f8 <HAL_SD_WriteBlocks+0x1ec>
 80026f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d112      	bne.n	800271e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a48      	ldr	r2, [pc, #288]	; (8002820 <HAL_SD_WriteBlocks+0x314>)
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002706:	431a      	orrs	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e094      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002724:	f240 331a 	movw	r3, #794	; 0x31a
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d091      	beq.n	8002652 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d022      	beq.n	8002782 <HAL_SD_WriteBlocks+0x276>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d91f      	bls.n	8002782 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	2b03      	cmp	r3, #3
 8002748:	d01b      	beq.n	8002782 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 ff54 	bl	80035fc <SDMMC_CmdStopTransfer>
 8002754:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002758:	2b00      	cmp	r3, #0
 800275a:	d012      	beq.n	8002782 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <HAL_SD_WriteBlocks+0x314>)
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276a:	431a      	orrs	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e062      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a22      	ldr	r2, [pc, #136]	; (8002820 <HAL_SD_WriteBlocks+0x314>)
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	f043 0208 	orr.w	r2, r3, #8
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e048      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d012      	beq.n	80027ea <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a15      	ldr	r2, [pc, #84]	; (8002820 <HAL_SD_WriteBlocks+0x314>)
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	f043 0202 	orr.w	r2, r3, #2
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e02e      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d015      	beq.n	8002824 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_SD_WriteBlocks+0x314>)
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	f043 0210 	orr.w	r2, r3, #16
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e014      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
 800281e:	bf00      	nop
 8002820:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f240 523a 	movw	r2, #1338	; 0x53a
 800282c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e006      	b.n	8002848 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
  }
}
 8002848:	4618      	mov	r0, r3
 800284a:	3748      	adds	r7, #72	; 0x48
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285e:	0f9b      	lsrs	r3, r3, #30
 8002860:	b2da      	uxtb	r2, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286a:	0e9b      	lsrs	r3, r3, #26
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	b2da      	uxtb	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287c:	0e1b      	lsrs	r3, r3, #24
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	b2da      	uxtb	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	b2da      	uxtb	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b2da      	uxtb	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b0:	0d1b      	lsrs	r3, r3, #20
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ce:	0bdb      	lsrs	r3, r3, #15
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e0:	0b9b      	lsrs	r3, r3, #14
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f2:	0b5b      	lsrs	r3, r3, #13
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002904:	0b1b      	lsrs	r3, r3, #12
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	b2da      	uxtb	r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	2b00      	cmp	r3, #0
 800291e:	d163      	bne.n	80029e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002924:	009a      	lsls	r2, r3, #2
 8002926:	f640 73fc 	movw	r3, #4092	; 0xffc
 800292a:	4013      	ands	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002930:	0f92      	lsrs	r2, r2, #30
 8002932:	431a      	orrs	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293c:	0edb      	lsrs	r3, r3, #27
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	b2da      	uxtb	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294e:	0e1b      	lsrs	r3, r3, #24
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	b2da      	uxtb	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002960:	0d5b      	lsrs	r3, r3, #21
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	b2da      	uxtb	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	b2da      	uxtb	r2, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002984:	0bdb      	lsrs	r3, r3, #15
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	b2da      	uxtb	r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	7e1b      	ldrb	r3, [r3, #24]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	3302      	adds	r3, #2
 80029a8:	2201      	movs	r2, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80029b2:	fb02 f203 	mul.w	r2, r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	7a1b      	ldrb	r3, [r3, #8]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	2201      	movs	r2, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80029d4:	0a52      	lsrs	r2, r2, #9
 80029d6:	fb02 f203 	mul.w	r2, r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e4:	661a      	str	r2, [r3, #96]	; 0x60
 80029e6:	e031      	b.n	8002a4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d11d      	bne.n	8002a2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fe:	0c1b      	lsrs	r3, r3, #16
 8002a00:	431a      	orrs	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	029a      	lsls	r2, r3, #10
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	661a      	str	r2, [r3, #96]	; 0x60
 8002a2a:	e00f      	b.n	8002a4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <HAL_SD_GetCardCSD+0x344>)
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e09d      	b.n	8002b88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a50:	0b9b      	lsrs	r3, r3, #14
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a62:	09db      	lsrs	r3, r3, #7
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	0fdb      	lsrs	r3, r3, #31
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	0f5b      	lsrs	r3, r3, #29
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	0d9b      	lsrs	r3, r3, #22
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	0d5b      	lsrs	r3, r3, #21
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	0bdb      	lsrs	r3, r3, #15
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	0b9b      	lsrs	r3, r3, #14
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	0b1b      	lsrs	r3, r3, #12
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	0a9b      	lsrs	r3, r3, #10
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	004005ff 	.word	0x004005ff

08002b98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b08e      	sub	sp, #56	; 0x38
 8002bf4:	af04      	add	r7, sp, #16
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d02e      	beq.n	8002c68 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c10:	d106      	bne.n	8002c20 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c1e:	e029      	b.n	8002c74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c26:	d10a      	bne.n	8002c3e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fa01 	bl	8003030 <SD_WideBus_Enable>
 8002c2e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c3c:	e01a      	b.n	8002c74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fa3e 	bl	80030c6 <SD_WideBus_Disable>
 8002c4a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38
 8002c58:	e00c      	b.n	8002c74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
 8002c66:	e005      	b.n	8002c74 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e024      	b.n	8002cda <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681d      	ldr	r5, [r3, #0]
 8002cb6:	466c      	mov	r4, sp
 8002cb8:	f107 0318 	add.w	r3, r7, #24
 8002cbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f000 fb10 	bl	80032f0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3728      	adds	r7, #40	; 0x28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	004005ff 	.word	0x004005ff

08002ce8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f970 	bl	8002fe0 <SD_SendStatus>
 8002d00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	0a5b      	lsrs	r3, r3, #9
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002d1e:	693b      	ldr	r3, [r7, #16]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b094      	sub	sp, #80	; 0x50
 8002d2c:	af04      	add	r7, sp, #16
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002d30:	2301      	movs	r3, #1
 8002d32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fb31 	bl	80033a0 <SDIO_GetPowerState>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d48:	e0b7      	b.n	8002eba <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d02f      	beq.n	8002db2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fd5a 	bl	8003810 <SDMMC_CmdSendCID>
 8002d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <SD_InitCard+0x40>
    {
      return errorstate;
 8002d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d66:	e0a8      	b.n	8002eba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fb5b 	bl	800342a <SDIO_GetResponse>
 8002d74:	4602      	mov	r2, r0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2104      	movs	r1, #4
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fb52 	bl	800342a <SDIO_GetResponse>
 8002d86:	4602      	mov	r2, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2108      	movs	r1, #8
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fb49 	bl	800342a <SDIO_GetResponse>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	210c      	movs	r1, #12
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fb40 	bl	800342a <SDIO_GetResponse>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d00d      	beq.n	8002dd6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f107 020e 	add.w	r2, r7, #14
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fd60 	bl	800388a <SDMMC_CmdSetRelAdd>
 8002dca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <SD_InitCard+0xae>
    {
      return errorstate;
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd4:	e071      	b.n	8002eba <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d036      	beq.n	8002e4c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002dde:	89fb      	ldrh	r3, [r7, #14]
 8002de0:	461a      	mov	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f000 fd2a 	bl	800384c <SDMMC_CmdSendCSD>
 8002df8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e02:	e05a      	b.n	8002eba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fb0d 	bl	800342a <SDIO_GetResponse>
 8002e10:	4602      	mov	r2, r0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2104      	movs	r1, #4
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fb04 	bl	800342a <SDIO_GetResponse>
 8002e22:	4602      	mov	r2, r0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fafb 	bl	800342a <SDIO_GetResponse>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	210c      	movs	r1, #12
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 faf2 	bl	800342a <SDIO_GetResponse>
 8002e46:	4602      	mov	r2, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2104      	movs	r1, #4
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fae9 	bl	800342a <SDIO_GetResponse>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	0d1a      	lsrs	r2, r3, #20
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fcf2 	bl	8002850 <HAL_SD_GetCardCSD>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e76:	e020      	b.n	8002eba <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6819      	ldr	r1, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	f04f 0400 	mov.w	r4, #0
 8002e86:	461a      	mov	r2, r3
 8002e88:	4623      	mov	r3, r4
 8002e8a:	4608      	mov	r0, r1
 8002e8c:	f000 fbd8 	bl	8003640 <SDMMC_CmdSelDesel>
 8002e90:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <SD_InitCard+0x174>
  {
    return errorstate;
 8002e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9a:	e00e      	b.n	8002eba <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681d      	ldr	r5, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	466c      	mov	r4, sp
 8002ea4:	f103 0210 	add.w	r2, r3, #16
 8002ea8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002eae:	3304      	adds	r3, #4
 8002eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f000 fa1c 	bl	80032f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3740      	adds	r7, #64	; 0x40
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ec4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fbd2 	bl	8003686 <SDMMC_CmdGoIdleState>
 8002ee2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <SD_PowerON+0x2a>
  {
    return errorstate;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	e072      	b.n	8002fd4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fbe5 	bl	80036c2 <SDMMC_CmdOperCond>
 8002ef8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fbbb 	bl	8003686 <SDMMC_CmdGoIdleState>
 8002f10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d004      	beq.n	8002f22 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	e05b      	b.n	8002fd4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d137      	bne.n	8002f9a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fbe5 	bl	8003700 <SDMMC_CmdAppCommand>
 8002f36:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02d      	beq.n	8002f9a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f42:	e047      	b.n	8002fd4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fbd8 	bl	8003700 <SDMMC_CmdAppCommand>
 8002f50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <SD_PowerON+0x98>
    {
      return errorstate;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	e03b      	b.n	8002fd4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	491e      	ldr	r1, [pc, #120]	; (8002fdc <SD_PowerON+0x118>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fbee 	bl	8003744 <SDMMC_CmdAppOperCommand>
 8002f68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f74:	e02e      	b.n	8002fd4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fa54 	bl	800342a <SDIO_GetResponse>
 8002f82:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	0fdb      	lsrs	r3, r3, #31
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <SD_PowerON+0xcc>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <SD_PowerON+0xce>
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]

    count++;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3301      	adds	r3, #1
 8002f98:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d802      	bhi.n	8002faa <SD_PowerON+0xe6>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0cc      	beq.n	8002f44 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d902      	bls.n	8002fba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb8:	e00c      	b.n	8002fd4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
 8002fca:	e002      	b.n	8002fd2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	c1100000 	.word	0xc1100000

08002fe0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ff4:	e018      	b.n	8003028 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 fc62 	bl	80038cc <SDMMC_CmdSendStatus>
 8003008:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	e009      	b.n	8003028 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fa05 	bl	800342a <SDIO_GetResponse>
 8003020:	4602      	mov	r2, r0
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f9ef 	bl	800342a <SDIO_GetResponse>
 800304c:	4603      	mov	r3, r0
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003056:	d102      	bne.n	800305e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800305c:	e02f      	b.n	80030be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800305e:	f107 030c 	add.w	r3, r7, #12
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f879 	bl	800315c <SD_FindSCR>
 800306a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	e023      	b.n	80030be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01c      	beq.n	80030ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f000 fb37 	bl	8003700 <SDMMC_CmdAppCommand>
 8003092:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	e00f      	b.n	80030be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2102      	movs	r1, #2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fb70 	bl	800378a <SDMMC_CmdBusWidth>
 80030aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	e003      	b.n	80030be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e001      	b.n	80030be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80030ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f9a4 	bl	800342a <SDIO_GetResponse>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ec:	d102      	bne.n	80030f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80030ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030f2:	e02f      	b.n	8003154 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4619      	mov	r1, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f82e 	bl	800315c <SD_FindSCR>
 8003100:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	e023      	b.n	8003154 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01c      	beq.n	8003150 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 faec 	bl	8003700 <SDMMC_CmdAppCommand>
 8003128:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	e00f      	b.n	8003154 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fb25 	bl	800378a <SDMMC_CmdBusWidth>
 8003140:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	e003      	b.n	8003154 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800314c:	2300      	movs	r3, #0
 800314e:	e001      	b.n	8003154 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003150:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b08f      	sub	sp, #60	; 0x3c
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003166:	f7fd fd9b 	bl	8000ca0 <HAL_GetTick>
 800316a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2108      	movs	r1, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f990 	bl	80034a8 <SDMMC_CmdBlockLength>
 8003188:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	e0a9      	b.n	80032e8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f000 faad 	bl	8003700 <SDMMC_CmdAppCommand>
 80031a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	e09a      	b.n	80032e8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80031b8:	2308      	movs	r3, #8
 80031ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80031bc:	2330      	movs	r3, #48	; 0x30
 80031be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80031c0:	2302      	movs	r3, #2
 80031c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f107 0210 	add.w	r2, r7, #16
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f93a 	bl	8003450 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 faf4 	bl	80037ce <SDMMC_CmdSendSCR>
 80031e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d022      	beq.n	8003234 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	e07a      	b.n	80032e8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	f107 0208 	add.w	r2, r7, #8
 800320c:	18d4      	adds	r4, r2, r3
 800320e:	4608      	mov	r0, r1
 8003210:	f000 f899 	bl	8003346 <SDIO_ReadFIFO>
 8003214:	4603      	mov	r3, r0
 8003216:	6023      	str	r3, [r4, #0]
      index++;
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	3301      	adds	r3, #1
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800321e:	f7fd fd3f 	bl	8000ca0 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d102      	bne.n	8003234 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800322e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003232:	e059      	b.n	80032e8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323a:	f240 432a 	movw	r3, #1066	; 0x42a
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0d6      	beq.n	80031f2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2208      	movs	r2, #8
 8003258:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800325a:	2308      	movs	r3, #8
 800325c:	e044      	b.n	80032e8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2202      	movs	r2, #2
 8003272:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003274:	2302      	movs	r3, #2
 8003276:	e037      	b.n	80032e8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2220      	movs	r2, #32
 800328c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800328e:	2320      	movs	r3, #32
 8003290:	e02a      	b.n	80032e8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f240 523a 	movw	r2, #1338	; 0x53a
 800329a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	061a      	lsls	r2, r3, #24
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0e1b      	lsrs	r3, r3, #24
 80032b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	601a      	str	r2, [r3, #0]
    scr++;
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	3304      	adds	r3, #4
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	061a      	lsls	r2, r3, #24
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	0e1b      	lsrs	r3, r3, #24
 80032e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	373c      	adds	r7, #60	; 0x3c
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}

080032f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80032f0:	b084      	sub	sp, #16
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	f107 001c 	add.w	r0, r7, #28
 80032fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003306:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003308:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800330a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800330e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003312:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003316:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800331a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800332a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	b004      	add	sp, #16
 8003344:	4770      	bx	lr

08003346 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003390:	2002      	movs	r0, #2
 8003392:	f7fd fc91 	bl	8000cb8 <HAL_Delay>
  
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0303 	and.w	r3, r3, #3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80033e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80033e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80033f6:	f023 030f 	bic.w	r3, r3, #15
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	b2db      	uxtb	r3, r3
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3314      	adds	r3, #20
 8003438:	461a      	mov	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
}  
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003476:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800347c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003482:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800349a:	2300      	movs	r3, #0

}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80034b6:	2310      	movs	r3, #16
 80034b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff74 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	2110      	movs	r1, #16
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa40 	bl	8003960 <SDMMC_GetCmdResp1>
 80034e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034e2:	69fb      	ldr	r3, [r7, #28]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80034fa:	2311      	movs	r3, #17
 80034fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800350c:	f107 0308 	add.w	r3, r7, #8
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff52 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	2111      	movs	r1, #17
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa1e 	bl	8003960 <SDMMC_GetCmdResp1>
 8003524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003526:	69fb      	ldr	r3, [r7, #28]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800353e:	2312      	movs	r3, #18
 8003540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003542:	2340      	movs	r3, #64	; 0x40
 8003544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800354a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003550:	f107 0308 	add.w	r3, r7, #8
 8003554:	4619      	mov	r1, r3
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ff30 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	2112      	movs	r1, #18
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9fc 	bl	8003960 <SDMMC_GetCmdResp1>
 8003568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800356a:	69fb      	ldr	r3, [r7, #28]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003582:	2318      	movs	r3, #24
 8003584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800358e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003592:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003594:	f107 0308 	add.w	r3, r7, #8
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff0e 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	2118      	movs	r1, #24
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9da 	bl	8003960 <SDMMC_GetCmdResp1>
 80035ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035ae:	69fb      	ldr	r3, [r7, #28]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80035c6:	2319      	movs	r3, #25
 80035c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035d8:	f107 0308 	add.w	r3, r7, #8
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff feec 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	2119      	movs	r1, #25
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f9b8 	bl	8003960 <SDMMC_GetCmdResp1>
 80035f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035f2:	69fb      	ldr	r3, [r7, #28]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003608:	230c      	movs	r3, #12
 800360a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800360c:	2340      	movs	r3, #64	; 0x40
 800360e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003618:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff fecb 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003626:	4a05      	ldr	r2, [pc, #20]	; (800363c <SDMMC_CmdStopTransfer+0x40>)
 8003628:	210c      	movs	r1, #12
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f998 	bl	8003960 <SDMMC_GetCmdResp1>
 8003630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003632:	69fb      	ldr	r3, [r7, #28]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	05f5e100 	.word	0x05f5e100

08003640 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003650:	2307      	movs	r3, #7
 8003652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003654:	2340      	movs	r3, #64	; 0x40
 8003656:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800365c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003660:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003662:	f107 0310 	add.w	r3, r7, #16
 8003666:	4619      	mov	r1, r3
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff fea7 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	2107      	movs	r1, #7
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f973 	bl	8003960 <SDMMC_GetCmdResp1>
 800367a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b088      	sub	sp, #32
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800369e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036a4:	f107 0308 	add.w	r3, r7, #8
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fe86 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f92d 	bl	8003910 <SDMMC_GetCmdError>
 80036b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036b8:	69fb      	ldr	r3, [r7, #28]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b088      	sub	sp, #32
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80036ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80036ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80036d0:	2308      	movs	r3, #8
 80036d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036d4:	2340      	movs	r3, #64	; 0x40
 80036d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4619      	mov	r1, r3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff fe67 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fb16 	bl	8003d20 <SDMMC_GetCmdResp7>
 80036f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036f6:	69fb      	ldr	r3, [r7, #28]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800370e:	2337      	movs	r3, #55	; 0x37
 8003710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003712:	2340      	movs	r3, #64	; 0x40
 8003714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800371a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800371e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fe48 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	2137      	movs	r1, #55	; 0x37
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f914 	bl	8003960 <SDMMC_GetCmdResp1>
 8003738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800373a:	69fb      	ldr	r3, [r7, #28]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800375a:	2329      	movs	r3, #41	; 0x29
 800375c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800375e:	2340      	movs	r3, #64	; 0x40
 8003760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800376a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800376c:	f107 0308 	add.w	r3, r7, #8
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fe22 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa23 	bl	8003bc4 <SDMMC_GetCmdResp3>
 800377e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003780:	69fb      	ldr	r3, [r7, #28]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b088      	sub	sp, #32
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003798:	2306      	movs	r3, #6
 800379a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800379c:	2340      	movs	r3, #64	; 0x40
 800379e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037aa:	f107 0308 	add.w	r3, r7, #8
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fe03 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	2106      	movs	r1, #6
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f8cf 	bl	8003960 <SDMMC_GetCmdResp1>
 80037c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037c4:	69fb      	ldr	r3, [r7, #28]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b088      	sub	sp, #32
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80037da:	2333      	movs	r3, #51	; 0x33
 80037dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037de:	2340      	movs	r3, #64	; 0x40
 80037e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fde2 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80037f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fc:	2133      	movs	r1, #51	; 0x33
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8ae 	bl	8003960 <SDMMC_GetCmdResp1>
 8003804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003806:	69fb      	ldr	r3, [r7, #28]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800381c:	2302      	movs	r3, #2
 800381e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003820:	23c0      	movs	r3, #192	; 0xc0
 8003822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800382c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff fdc1 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f97c 	bl	8003b38 <SDMMC_GetCmdResp2>
 8003840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003842:	69fb      	ldr	r3, [r7, #28]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800385a:	2309      	movs	r3, #9
 800385c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800385e:	23c0      	movs	r3, #192	; 0xc0
 8003860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800386c:	f107 0308 	add.w	r3, r7, #8
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fda2 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f95d 	bl	8003b38 <SDMMC_GetCmdResp2>
 800387e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003880:	69fb      	ldr	r3, [r7, #28]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b088      	sub	sp, #32
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003898:	2303      	movs	r3, #3
 800389a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800389c:	2340      	movs	r3, #64	; 0x40
 800389e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038aa:	f107 0308 	add.w	r3, r7, #8
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fd83 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	2103      	movs	r1, #3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9bc 	bl	8003c38 <SDMMC_GetCmdResp6>
 80038c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038c2:	69fb      	ldr	r3, [r7, #28]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80038da:	230d      	movs	r3, #13
 80038dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038de:	2340      	movs	r3, #64	; 0x40
 80038e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038ec:	f107 0308 	add.w	r3, r7, #8
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fd62 	bl	80033bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	210d      	movs	r1, #13
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f82e 	bl	8003960 <SDMMC_GetCmdResp1>
 8003904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003906:	69fb      	ldr	r3, [r7, #28]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003910:	b490      	push	{r4, r7}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <SDMMC_GetCmdError+0x48>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0f      	ldr	r2, [pc, #60]	; (800395c <SDMMC_GetCmdError+0x4c>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0a5b      	lsrs	r3, r3, #9
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800392c:	4623      	mov	r3, r4
 800392e:	1e5c      	subs	r4, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003934:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003938:	e009      	b.n	800394e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f2      	beq.n	800392c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	22c5      	movs	r2, #197	; 0xc5
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bc90      	pop	{r4, r7}
 8003956:	4770      	bx	lr
 8003958:	20000000 	.word	0x20000000
 800395c:	10624dd3 	.word	0x10624dd3

08003960 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	460b      	mov	r3, r1
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800396e:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <SDMMC_GetCmdResp1+0x1cc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6f      	ldr	r2, [pc, #444]	; (8003b30 <SDMMC_GetCmdResp1+0x1d0>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003980:	4623      	mov	r3, r4
 8003982:	1e5c      	subs	r4, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800398c:	e0c9      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <SDMMC_GetCmdResp1+0x20>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1eb      	bne.n	8003980 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2204      	movs	r2, #4
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80039ba:	2304      	movs	r3, #4
 80039bc:	e0b1      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0a6      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	22c5      	movs	r2, #197	; 0xc5
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff fd18 	bl	8003410 <SDIO_GetCommandResponse>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	7afb      	ldrb	r3, [r7, #11]
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d001      	beq.n	80039ee <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e099      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80039ee:	2100      	movs	r1, #0
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fd1a 	bl	800342a <SDIO_GetResponse>
 80039f6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4b4e      	ldr	r3, [pc, #312]	; (8003b34 <SDMMC_GetCmdResp1+0x1d4>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e08d      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	da02      	bge.n	8003a12 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a10:	e087      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003a1c:	2340      	movs	r3, #64	; 0x40
 8003a1e:	e080      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	e079      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a3c:	e071      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4c:	e069      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a5c:	e061      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a6c:	e059      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7c:	e051      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a8c:	e049      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a9c:	e041      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8003aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aac:	e039      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003abc:	e031      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003ac8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003acc:	e029      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ad8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003adc:	e021      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003ae8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003aec:	e019      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003af8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003afc:	e011      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003b08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b0c:	e009      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003b18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003b1c:	e001      	b.n	8003b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd90      	pop	{r4, r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000000 	.word	0x20000000
 8003b30:	10624dd3 	.word	0x10624dd3
 8003b34:	fdffe008 	.word	0xfdffe008

08003b38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003b38:	b490      	push	{r4, r7}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b40:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <SDMMC_GetCmdResp2+0x84>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <SDMMC_GetCmdResp2+0x88>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0a5b      	lsrs	r3, r3, #9
 8003b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003b54:	4623      	mov	r3, r4
 8003b56:	1e5c      	subs	r4, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b60:	e026      	b.n	8003bb0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <SDMMC_GetCmdResp2+0x1c>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1eb      	bne.n	8003b54 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b8e:	2304      	movs	r3, #4
 8003b90:	e00e      	b.n	8003bb0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e003      	b.n	8003bb0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	22c5      	movs	r2, #197	; 0xc5
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc90      	pop	{r4, r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	10624dd3 	.word	0x10624dd3

08003bc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003bc4:	b490      	push	{r4, r7}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003bcc:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <SDMMC_GetCmdResp3+0x6c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <SDMMC_GetCmdResp3+0x70>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0a5b      	lsrs	r3, r3, #9
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003be0:	4623      	mov	r3, r4
 8003be2:	1e5c      	subs	r4, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003be8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bec:	e01b      	b.n	8003c26 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <SDMMC_GetCmdResp3+0x1c>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1eb      	bne.n	8003be0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2204      	movs	r2, #4
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	e003      	b.n	8003c26 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	22c5      	movs	r2, #197	; 0xc5
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc90      	pop	{r4, r7}
 8003c2e:	4770      	bx	lr
 8003c30:	20000000 	.word	0x20000000
 8003c34:	10624dd3 	.word	0x10624dd3

08003c38 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	460b      	mov	r3, r1
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c46:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <SDMMC_GetCmdResp6+0xe0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a34      	ldr	r2, [pc, #208]	; (8003d1c <SDMMC_GetCmdResp6+0xe4>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	0a5b      	lsrs	r3, r3, #9
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	1e5c      	subs	r4, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c66:	e052      	b.n	8003d0e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <SDMMC_GetCmdResp6+0x22>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1eb      	bne.n	8003c5a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2204      	movs	r2, #4
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c94:	2304      	movs	r3, #4
 8003c96:	e03a      	b.n	8003d0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e02f      	b.n	8003d0e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff fbae 	bl	8003410 <SDIO_GetCommandResponse>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d001      	beq.n	8003cc2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e025      	b.n	8003d0e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	22c5      	movs	r2, #197	; 0xc5
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003cc8:	2100      	movs	r1, #0
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff fbad 	bl	800342a <SDIO_GetResponse>
 8003cd0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d106      	bne.n	8003cea <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e011      	b.n	8003d0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf8:	e009      	b.n	8003d0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d08:	e001      	b.n	8003d0e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	10624dd3 	.word	0x10624dd3

08003d20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003d20:	b490      	push	{r4, r7}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d28:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <SDMMC_GetCmdResp7+0x90>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <SDMMC_GetCmdResp7+0x94>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0a5b      	lsrs	r3, r3, #9
 8003d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	1e5c      	subs	r4, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d48:	e02c      	b.n	8003da4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <SDMMC_GetCmdResp7+0x1c>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1eb      	bne.n	8003d3c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2204      	movs	r2, #4
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d76:	2304      	movs	r3, #4
 8003d78:	e014      	b.n	8003da4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e009      	b.n	8003da4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003da2:	2300      	movs	r3, #0
  
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc90      	pop	{r4, r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000000 	.word	0x20000000
 8003db4:	10624dd3 	.word	0x10624dd3

08003db8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003dbc:	4904      	ldr	r1, [pc, #16]	; (8003dd0 <MX_FATFS_Init+0x18>)
 8003dbe:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <MX_FATFS_Init+0x1c>)
 8003dc0:	f002 fd9c 	bl	80068fc <FATFS_LinkDriver>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <MX_FATFS_Init+0x20>)
 8003dca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003dcc:	bf00      	nop
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000178 	.word	0x20000178
 8003dd4:	08007b44 	.word	0x08007b44
 8003dd8:	20000174 	.word	0x20000174

08003ddc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003de0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003df6:	f000 f879 	bl	8003eec <BSP_SD_IsDetected>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d001      	beq.n	8003e04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e012      	b.n	8003e2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003e04:	480b      	ldr	r0, [pc, #44]	; (8003e34 <BSP_SD_Init+0x48>)
 8003e06:	f7fe f8f7 	bl	8001ff8 <HAL_SD_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d109      	bne.n	8003e28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8003e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e18:	4806      	ldr	r0, [pc, #24]	; (8003e34 <BSP_SD_Init+0x48>)
 8003e1a:	f7fe fee9 	bl	8002bf0 <HAL_SD_ConfigWideBusOperation>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8003e28:	79fb      	ldrb	r3, [r7, #7]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200000cc 	.word	0x200000cc

08003e38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	4806      	ldr	r0, [pc, #24]	; (8003e70 <BSP_SD_ReadBlocks+0x38>)
 8003e56:	f7fe f95f 	bl	8002118 <HAL_SD_ReadBlocks>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200000cc 	.word	0x200000cc

08003e74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	68f9      	ldr	r1, [r7, #12]
 8003e90:	4806      	ldr	r0, [pc, #24]	; (8003eac <BSP_SD_WriteBlocks+0x38>)
 8003e92:	f7fe fb3b 	bl	800250c <HAL_SD_WriteBlocks>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	200000cc 	.word	0x200000cc

08003eb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003eb4:	4805      	ldr	r0, [pc, #20]	; (8003ecc <BSP_SD_GetCardState+0x1c>)
 8003eb6:	f7fe ff17 	bl	8002ce8 <HAL_SD_GetCardState>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	bf14      	ite	ne
 8003ec0:	2301      	movne	r3, #1
 8003ec2:	2300      	moveq	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200000cc 	.word	0x200000cc

08003ed0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4803      	ldr	r0, [pc, #12]	; (8003ee8 <BSP_SD_GetCardInfo+0x18>)
 8003edc:	f7fe fe5c 	bl	8002b98 <HAL_SD_GetCardInfo>
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	200000cc 	.word	0x200000cc

08003eec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	b2db      	uxtb	r3, r3
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <SD_CheckStatus+0x38>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003f18:	f7ff ffca 	bl	8003eb0 <BSP_SD_GetCardState>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d107      	bne.n	8003f32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <SD_CheckStatus+0x38>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <SD_CheckStatus+0x38>)
 8003f30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003f32:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <SD_CheckStatus+0x38>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b2db      	uxtb	r3, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000009 	.word	0x20000009

08003f44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <SD_initialize+0x38>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003f54:	f7ff ff4a 	bl	8003dec <BSP_SD_Init>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ffd1 	bl	8003f08 <SD_CheckStatus>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <SD_initialize+0x38>)
 8003f6c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003f6e:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <SD_initialize+0x38>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	b2db      	uxtb	r3, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000009 	.word	0x20000009

08003f80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ffbb 	bl	8003f08 <SD_CheckStatus>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	68b8      	ldr	r0, [r7, #8]
 8003fba:	f7ff ff3d 	bl	8003e38 <BSP_SD_ReadBlocks>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d107      	bne.n	8003fd4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003fc4:	bf00      	nop
 8003fc6:	f7ff ff73 	bl	8003eb0 <BSP_SD_GetCardState>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1fa      	bne.n	8003fc6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b086      	sub	sp, #24
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4603      	mov	r3, r0
 8003fec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	68b8      	ldr	r0, [r7, #8]
 8003ffc:	f7ff ff3a 	bl	8003e74 <BSP_SD_WriteBlocks>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004006:	bf00      	nop
 8004008:	f7ff ff52 	bl	8003eb0 <BSP_SD_GetCardState>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1fa      	bne.n	8004008 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	; 0x30
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	603a      	str	r2, [r7, #0]
 800402a:	71fb      	strb	r3, [r7, #7]
 800402c:	460b      	mov	r3, r1
 800402e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004036:	4b25      	ldr	r3, [pc, #148]	; (80040cc <SD_ioctl+0xac>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <SD_ioctl+0x28>
 8004044:	2303      	movs	r3, #3
 8004046:	e03c      	b.n	80040c2 <SD_ioctl+0xa2>

  switch (cmd)
 8004048:	79bb      	ldrb	r3, [r7, #6]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d834      	bhi.n	80040b8 <SD_ioctl+0x98>
 800404e:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <SD_ioctl+0x34>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004065 	.word	0x08004065
 8004058:	0800406d 	.word	0x0800406d
 800405c:	08004085 	.word	0x08004085
 8004060:	0800409f 	.word	0x0800409f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800406a:	e028      	b.n	80040be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff2d 	bl	8003ed0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004082:	e01c      	b.n	80040be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ff21 	bl	8003ed0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	b29a      	uxth	r2, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800409c:	e00f      	b.n	80040be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800409e:	f107 030c 	add.w	r3, r7, #12
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff14 	bl	8003ed0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	0a5a      	lsrs	r2, r3, #9
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80040b6:	e002      	b.n	80040be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80040b8:	2304      	movs	r3, #4
 80040ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80040be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3730      	adds	r7, #48	; 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000009 	.word	0x20000009

080040d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <disk_status+0x30>)
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	79fa      	ldrb	r2, [r7, #7]
 80040e8:	4905      	ldr	r1, [pc, #20]	; (8004100 <disk_status+0x30>)
 80040ea:	440a      	add	r2, r1
 80040ec:	7a12      	ldrb	r2, [r2, #8]
 80040ee:	4610      	mov	r0, r2
 80040f0:	4798      	blx	r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200000b8 	.word	0x200000b8

08004104 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <disk_initialize+0x48>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d111      	bne.n	8004140 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	4a0b      	ldr	r2, [pc, #44]	; (800414c <disk_initialize+0x48>)
 8004120:	2101      	movs	r1, #1
 8004122:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <disk_initialize+0x48>)
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	79fa      	ldrb	r2, [r7, #7]
 8004132:	4906      	ldr	r1, [pc, #24]	; (800414c <disk_initialize+0x48>)
 8004134:	440a      	add	r2, r1
 8004136:	7a12      	ldrb	r2, [r2, #8]
 8004138:	4610      	mov	r0, r2
 800413a:	4798      	blx	r3
 800413c:	4603      	mov	r3, r0
 800413e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	200000b8 	.word	0x200000b8

08004150 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4603      	mov	r3, r0
 800415e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <disk_read+0x3c>)
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	689c      	ldr	r4, [r3, #8]
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	4a07      	ldr	r2, [pc, #28]	; (800418c <disk_read+0x3c>)
 8004170:	4413      	add	r3, r2
 8004172:	7a18      	ldrb	r0, [r3, #8]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	47a0      	blx	r4
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004180:	7dfb      	ldrb	r3, [r7, #23]
}
 8004182:	4618      	mov	r0, r3
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	bd90      	pop	{r4, r7, pc}
 800418a:	bf00      	nop
 800418c:	200000b8 	.word	0x200000b8

08004190 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4603      	mov	r3, r0
 800419e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <disk_write+0x3c>)
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	68dc      	ldr	r4, [r3, #12]
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	4a07      	ldr	r2, [pc, #28]	; (80041cc <disk_write+0x3c>)
 80041b0:	4413      	add	r3, r2
 80041b2:	7a18      	ldrb	r0, [r3, #8]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	47a0      	blx	r4
 80041bc:	4603      	mov	r3, r0
 80041be:	75fb      	strb	r3, [r7, #23]
  return res;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200000b8 	.word	0x200000b8

080041d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	603a      	str	r2, [r7, #0]
 80041da:	71fb      	strb	r3, [r7, #7]
 80041dc:	460b      	mov	r3, r1
 80041de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	4a09      	ldr	r2, [pc, #36]	; (8004208 <disk_ioctl+0x38>)
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	79fa      	ldrb	r2, [r7, #7]
 80041ee:	4906      	ldr	r1, [pc, #24]	; (8004208 <disk_ioctl+0x38>)
 80041f0:	440a      	add	r2, r1
 80041f2:	7a10      	ldrb	r0, [r2, #8]
 80041f4:	79b9      	ldrb	r1, [r7, #6]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	4798      	blx	r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200000b8 	.word	0x200000b8

0800420c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3301      	adds	r3, #1
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800421c:	89fb      	ldrh	r3, [r7, #14]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	b21a      	sxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b21b      	sxth	r3, r3
 8004228:	4313      	orrs	r3, r2
 800422a:	b21b      	sxth	r3, r3
 800422c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800422e:	89fb      	ldrh	r3, [r7, #14]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3303      	adds	r3, #3
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	3202      	adds	r2, #2
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	3201      	adds	r2, #1
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
	return rv;
 8004274:	68fb      	ldr	r3, [r7, #12]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	887a      	ldrh	r2, [r7, #2]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	887b      	ldrh	r3, [r7, #2]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00d      	beq.n	8004346 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	1c53      	adds	r3, r2, #1
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1c59      	adds	r1, r3, #1
 8004334:	6179      	str	r1, [r7, #20]
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3b01      	subs	r3, #1
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f1      	bne.n	800432a <mem_cpy+0x1a>
	}
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004352:	b480      	push	{r7}
 8004354:	b087      	sub	sp, #28
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	617a      	str	r2, [r7, #20]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3b01      	subs	r3, #1
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f3      	bne.n	8004362 <mem_set+0x10>
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004386:	b480      	push	{r7}
 8004388:	b089      	sub	sp, #36	; 0x24
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	61fa      	str	r2, [r7, #28]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	4619      	mov	r1, r3
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	61ba      	str	r2, [r7, #24]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	1acb      	subs	r3, r1, r3
 80043b2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <mem_cmp+0x40>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0eb      	beq.n	800439e <mem_cmp+0x18>

	return r;
 80043c6:	697b      	ldr	r3, [r7, #20]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3724      	adds	r7, #36	; 0x24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80043de:	e002      	b.n	80043e6 <chk_chr+0x12>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3301      	adds	r3, #1
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <chk_chr+0x26>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d1f2      	bne.n	80043e0 <chk_chr+0xc>
	return *str;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	781b      	ldrb	r3, [r3, #0]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e029      	b.n	8004474 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <chk_lock+0xb4>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4413      	add	r3, r2
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01d      	beq.n	800446a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800442e:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <chk_lock+0xb4>)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	4413      	add	r3, r2
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d116      	bne.n	800446e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <chk_lock+0xb4>)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4413      	add	r3, r2
 8004448:	3304      	adds	r3, #4
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004450:	429a      	cmp	r2, r3
 8004452:	d10c      	bne.n	800446e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004454:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <chk_lock+0xb4>)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4413      	add	r3, r2
 800445c:	3308      	adds	r3, #8
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004464:	429a      	cmp	r2, r3
 8004466:	d102      	bne.n	800446e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004468:	e007      	b.n	800447a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800446a:	2301      	movs	r3, #1
 800446c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d9d2      	bls.n	8004420 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d109      	bne.n	8004494 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <chk_lock+0x80>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d101      	bne.n	8004490 <chk_lock+0x84>
 800448c:	2300      	movs	r3, #0
 800448e:	e010      	b.n	80044b2 <chk_lock+0xa6>
 8004490:	2312      	movs	r3, #18
 8004492:	e00e      	b.n	80044b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d108      	bne.n	80044ac <chk_lock+0xa0>
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <chk_lock+0xb4>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	4413      	add	r3, r2
 80044a2:	330c      	adds	r3, #12
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d101      	bne.n	80044b0 <chk_lock+0xa4>
 80044ac:	2310      	movs	r3, #16
 80044ae:	e000      	b.n	80044b2 <chk_lock+0xa6>
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000098 	.word	0x20000098

080044c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	e002      	b.n	80044d6 <enq_lock+0x12>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3301      	adds	r3, #1
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d806      	bhi.n	80044ea <enq_lock+0x26>
 80044dc:	4a09      	ldr	r2, [pc, #36]	; (8004504 <enq_lock+0x40>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	4413      	add	r3, r2
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f2      	bne.n	80044d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000098 	.word	0x20000098

08004508 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	e01f      	b.n	8004558 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004518:	4a41      	ldr	r2, [pc, #260]	; (8004620 <inc_lock+0x118>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	4413      	add	r3, r2
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d113      	bne.n	8004552 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800452a:	4a3d      	ldr	r2, [pc, #244]	; (8004620 <inc_lock+0x118>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	4413      	add	r3, r2
 8004532:	3304      	adds	r3, #4
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800453a:	429a      	cmp	r2, r3
 800453c:	d109      	bne.n	8004552 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800453e:	4a38      	ldr	r2, [pc, #224]	; (8004620 <inc_lock+0x118>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	3308      	adds	r3, #8
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800454e:	429a      	cmp	r2, r3
 8004550:	d006      	beq.n	8004560 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3301      	adds	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d9dc      	bls.n	8004518 <inc_lock+0x10>
 800455e:	e000      	b.n	8004562 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004560:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d132      	bne.n	80045ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e002      	b.n	8004574 <inc_lock+0x6c>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d806      	bhi.n	8004588 <inc_lock+0x80>
 800457a:	4a29      	ldr	r2, [pc, #164]	; (8004620 <inc_lock+0x118>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	4413      	add	r3, r2
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f2      	bne.n	800456e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d101      	bne.n	8004592 <inc_lock+0x8a>
 800458e:	2300      	movs	r3, #0
 8004590:	e040      	b.n	8004614 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4922      	ldr	r1, [pc, #136]	; (8004620 <inc_lock+0x118>)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	440b      	add	r3, r1
 800459e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	491e      	ldr	r1, [pc, #120]	; (8004620 <inc_lock+0x118>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	440b      	add	r3, r1
 80045ac:	3304      	adds	r3, #4
 80045ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	491a      	ldr	r1, [pc, #104]	; (8004620 <inc_lock+0x118>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	440b      	add	r3, r1
 80045bc:	3308      	adds	r3, #8
 80045be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80045c0:	4a17      	ldr	r2, [pc, #92]	; (8004620 <inc_lock+0x118>)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	330c      	adds	r3, #12
 80045ca:	2200      	movs	r2, #0
 80045cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <inc_lock+0xe0>
 80045d4:	4a12      	ldr	r2, [pc, #72]	; (8004620 <inc_lock+0x118>)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	4413      	add	r3, r2
 80045dc:	330c      	adds	r3, #12
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <inc_lock+0xe0>
 80045e4:	2300      	movs	r3, #0
 80045e6:	e015      	b.n	8004614 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <inc_lock+0xf8>
 80045ee:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <inc_lock+0x118>)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	4413      	add	r3, r2
 80045f6:	330c      	adds	r3, #12
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	e001      	b.n	8004604 <inc_lock+0xfc>
 8004600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004604:	4906      	ldr	r1, [pc, #24]	; (8004620 <inc_lock+0x118>)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	440b      	add	r3, r1
 800460c:	330c      	adds	r3, #12
 800460e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	20000098 	.word	0x20000098

08004624 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d825      	bhi.n	8004684 <dec_lock+0x60>
		n = Files[i].ctr;
 8004638:	4a17      	ldr	r2, [pc, #92]	; (8004698 <dec_lock+0x74>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	4413      	add	r3, r2
 8004640:	330c      	adds	r3, #12
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004646:	89fb      	ldrh	r3, [r7, #14]
 8004648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464c:	d101      	bne.n	8004652 <dec_lock+0x2e>
 800464e:	2300      	movs	r3, #0
 8004650:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <dec_lock+0x3a>
 8004658:	89fb      	ldrh	r3, [r7, #14]
 800465a:	3b01      	subs	r3, #1
 800465c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800465e:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <dec_lock+0x74>)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	4413      	add	r3, r2
 8004666:	330c      	adds	r3, #12
 8004668:	89fa      	ldrh	r2, [r7, #14]
 800466a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <dec_lock+0x5a>
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <dec_lock+0x74>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	4413      	add	r3, r2
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	737b      	strb	r3, [r7, #13]
 8004682:	e001      	b.n	8004688 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004684:	2302      	movs	r3, #2
 8004686:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004688:	7b7b      	ldrb	r3, [r7, #13]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000098 	.word	0x20000098

0800469c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e010      	b.n	80046cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <clear_lock+0x44>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	4413      	add	r3, r2
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d105      	bne.n	80046c6 <clear_lock+0x2a>
 80046ba:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <clear_lock+0x44>)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	4413      	add	r3, r2
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d9eb      	bls.n	80046aa <clear_lock+0xe>
	}
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000098 	.word	0x20000098

080046e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	78db      	ldrb	r3, [r3, #3]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d034      	beq.n	8004762 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	7858      	ldrb	r0, [r3, #1]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004708:	2301      	movs	r3, #1
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	f7ff fd40 	bl	8004190 <disk_write>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	e022      	b.n	8004762 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	1ad2      	subs	r2, r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	429a      	cmp	r2, r3
 8004730:	d217      	bcs.n	8004762 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	789b      	ldrb	r3, [r3, #2]
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	e010      	b.n	800475c <sync_window+0x78>
					wsect += fs->fsize;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4413      	add	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7858      	ldrb	r0, [r3, #1]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800474e:	2301      	movs	r3, #1
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	f7ff fd1d 	bl	8004190 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3b01      	subs	r3, #1
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d8eb      	bhi.n	800473a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d01b      	beq.n	80047bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ffad 	bl	80046e4 <sync_window>
 800478a:	4603      	mov	r3, r0
 800478c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d113      	bne.n	80047bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7858      	ldrb	r0, [r3, #1]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800479e:	2301      	movs	r3, #1
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	f7ff fcd5 	bl	8004150 <disk_read>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ff87 	bl	80046e4 <sync_window>
 80047d6:	4603      	mov	r3, r0
 80047d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d159      	bne.n	8004894 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d149      	bne.n	800487c <sync_fs+0xb4>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	791b      	ldrb	r3, [r3, #4]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d145      	bne.n	800487c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	899b      	ldrh	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	2100      	movs	r1, #0
 80047fe:	f7ff fda8 	bl	8004352 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3334      	adds	r3, #52	; 0x34
 8004806:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800480a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fd37 	bl	8004282 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3334      	adds	r3, #52	; 0x34
 8004818:	4921      	ldr	r1, [pc, #132]	; (80048a0 <sync_fs+0xd8>)
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fd4c 	bl	80042b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3334      	adds	r3, #52	; 0x34
 8004824:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004828:	491e      	ldr	r1, [pc, #120]	; (80048a4 <sync_fs+0xdc>)
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fd44 	bl	80042b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3334      	adds	r3, #52	; 0x34
 8004834:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f7ff fd3a 	bl	80042b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3334      	adds	r3, #52	; 0x34
 8004848:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7ff fd30 	bl	80042b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	7858      	ldrb	r0, [r3, #1]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004870:	2301      	movs	r3, #1
 8004872:	f7ff fc8d 	bl	8004190 <disk_write>
			fs->fsi_flag = 0;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	2200      	movs	r2, #0
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fca3 	bl	80041d0 <disk_ioctl>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <sync_fs+0xcc>
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	41615252 	.word	0x41615252
 80048a4:	61417272 	.word	0x61417272

080048a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	3b02      	subs	r3, #2
 80048b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	3b02      	subs	r3, #2
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d301      	bcc.n	80048c8 <clust2sect+0x20>
 80048c4:	2300      	movs	r3, #0
 80048c6:	e008      	b.n	80048da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	895b      	ldrh	r3, [r3, #10]
 80048cc:	461a      	mov	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	fb03 f202 	mul.w	r2, r3, r2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4413      	add	r3, r2
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d904      	bls.n	8004906 <get_fat+0x20>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004906:	2301      	movs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e0b7      	b.n	8004a7c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d05a      	beq.n	80049d0 <get_fat+0xea>
 800491a:	2b03      	cmp	r3, #3
 800491c:	d07d      	beq.n	8004a1a <get_fat+0x134>
 800491e:	2b01      	cmp	r3, #1
 8004920:	f040 80a2 	bne.w	8004a68 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	899b      	ldrh	r3, [r3, #12]
 800493a:	4619      	mov	r1, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004942:	4413      	add	r3, r2
 8004944:	4619      	mov	r1, r3
 8004946:	6938      	ldr	r0, [r7, #16]
 8004948:	f7ff ff10 	bl	800476c <move_window>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	f040 808d 	bne.w	8004a6e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	60fa      	str	r2, [r7, #12]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	8992      	ldrh	r2, [r2, #12]
 800495e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004962:	fb02 f201 	mul.w	r2, r2, r1
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004970:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	899b      	ldrh	r3, [r3, #12]
 800497a:	4619      	mov	r1, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004982:	4413      	add	r3, r2
 8004984:	4619      	mov	r1, r3
 8004986:	6938      	ldr	r0, [r7, #16]
 8004988:	f7ff fef0 	bl	800476c <move_window>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d16f      	bne.n	8004a72 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	899b      	ldrh	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	fbb3 f1f2 	udiv	r1, r3, r2
 800499e:	fb02 f201 	mul.w	r2, r2, r1
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	461a      	mov	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <get_fat+0xe0>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	e002      	b.n	80049cc <get_fat+0xe6>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	617b      	str	r3, [r7, #20]
			break;
 80049ce:	e055      	b.n	8004a7c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	899b      	ldrh	r3, [r3, #12]
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4619      	mov	r1, r3
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80049e4:	4413      	add	r3, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	6938      	ldr	r0, [r7, #16]
 80049ea:	f7ff febf 	bl	800476c <move_window>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d140      	bne.n	8004a76 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	8992      	ldrh	r2, [r2, #12]
 8004a02:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a06:	fb02 f200 	mul.w	r2, r2, r0
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fbfc 	bl	800420c <ld_word>
 8004a14:	4603      	mov	r3, r0
 8004a16:	617b      	str	r3, [r7, #20]
			break;
 8004a18:	e030      	b.n	8004a7c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	899b      	ldrh	r3, [r3, #12]
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	4619      	mov	r1, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a2e:	4413      	add	r3, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	6938      	ldr	r0, [r7, #16]
 8004a34:	f7ff fe9a 	bl	800476c <move_window>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d11d      	bne.n	8004a7a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	8992      	ldrh	r2, [r2, #12]
 8004a4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a50:	fb02 f200 	mul.w	r2, r2, r0
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	440b      	add	r3, r1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fbef 	bl	800423c <ld_dword>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a64:	617b      	str	r3, [r7, #20]
			break;
 8004a66:	e009      	b.n	8004a7c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004a68:	2301      	movs	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	e006      	b.n	8004a7c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a6e:	bf00      	nop
 8004a70:	e004      	b.n	8004a7c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a72:	bf00      	nop
 8004a74:	e002      	b.n	8004a7c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a7a:	bf00      	nop
		}
	}

	return val;
 8004a7c:	697b      	ldr	r3, [r7, #20]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004a86:	b590      	push	{r4, r7, lr}
 8004a88:	b089      	sub	sp, #36	; 0x24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004a92:	2302      	movs	r3, #2
 8004a94:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	f240 8106 	bls.w	8004caa <put_fat+0x224>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	f080 8100 	bcs.w	8004caa <put_fat+0x224>
		switch (fs->fs_type) {
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	f000 8088 	beq.w	8004bc4 <put_fat+0x13e>
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	f000 80b0 	beq.w	8004c1a <put_fat+0x194>
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	f040 80f5 	bne.w	8004caa <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4413      	add	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	899b      	ldrh	r3, [r3, #12]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ade:	4413      	add	r3, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff fe42 	bl	800476c <move_window>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004aec:	7ffb      	ldrb	r3, [r7, #31]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 80d4 	bne.w	8004c9c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	61ba      	str	r2, [r7, #24]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	8992      	ldrh	r2, [r2, #12]
 8004b04:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b08:	fb02 f200 	mul.w	r2, r2, r0
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	440b      	add	r3, r1
 8004b10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00d      	beq.n	8004b38 <put_fat+0xb2>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	b25a      	sxtb	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	b25b      	sxtb	r3, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e001      	b.n	8004b3c <put_fat+0xb6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	899b      	ldrh	r3, [r3, #12]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b56:	4413      	add	r3, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fe06 	bl	800476c <move_window>
 8004b60:	4603      	mov	r3, r0
 8004b62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b64:	7ffb      	ldrb	r3, [r7, #31]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f040 809a 	bne.w	8004ca0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	899b      	ldrh	r3, [r3, #12]
 8004b76:	461a      	mov	r2, r3
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b7e:	fb02 f200 	mul.w	r2, r2, r0
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	440b      	add	r3, r1
 8004b86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <put_fat+0x114>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	e00e      	b.n	8004bb8 <put_fat+0x132>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b25b      	sxtb	r3, r3
 8004ba0:	f023 030f 	bic.w	r3, r3, #15
 8004ba4:	b25a      	sxtb	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	b25b      	sxtb	r3, r3
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	b25b      	sxtb	r3, r3
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b25b      	sxtb	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	70da      	strb	r2, [r3, #3]
			break;
 8004bc2:	e072      	b.n	8004caa <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	899b      	ldrh	r3, [r3, #12]
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bd8:	4413      	add	r3, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7ff fdc5 	bl	800476c <move_window>
 8004be2:	4603      	mov	r3, r0
 8004be4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d15b      	bne.n	8004ca4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	8992      	ldrh	r2, [r2, #12]
 8004bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bfe:	fb02 f200 	mul.w	r2, r2, r0
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	b292      	uxth	r2, r2
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fb38 	bl	8004282 <st_word>
			fs->wflag = 1;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	70da      	strb	r2, [r3, #3]
			break;
 8004c18:	e047      	b.n	8004caa <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	899b      	ldrh	r3, [r3, #12]
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	4619      	mov	r1, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c2e:	4413      	add	r3, r2
 8004c30:	4619      	mov	r1, r3
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fd9a 	bl	800476c <move_window>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c3c:	7ffb      	ldrb	r3, [r7, #31]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d132      	bne.n	8004ca8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	8992      	ldrh	r2, [r2, #12]
 8004c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c5a:	fb02 f200 	mul.w	r2, r2, r0
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	440b      	add	r3, r1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff faea 	bl	800423c <ld_dword>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c6e:	4323      	orrs	r3, r4
 8004c70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	8992      	ldrh	r2, [r2, #12]
 8004c80:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c84:	fb02 f200 	mul.w	r2, r2, r0
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff fb12 	bl	80042b8 <st_dword>
			fs->wflag = 1;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	70da      	strb	r2, [r3, #3]
			break;
 8004c9a:	e006      	b.n	8004caa <put_fat+0x224>
			if (res != FR_OK) break;
 8004c9c:	bf00      	nop
 8004c9e:	e004      	b.n	8004caa <put_fat+0x224>
			if (res != FR_OK) break;
 8004ca0:	bf00      	nop
 8004ca2:	e002      	b.n	8004caa <put_fat+0x224>
			if (res != FR_OK) break;
 8004ca4:	bf00      	nop
 8004ca6:	e000      	b.n	8004caa <put_fat+0x224>
			if (res != FR_OK) break;
 8004ca8:	bf00      	nop
		}
	}
	return res;
 8004caa:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3724      	adds	r7, #36	; 0x24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd90      	pop	{r4, r7, pc}

08004cb4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d904      	bls.n	8004cda <remove_chain+0x26>
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d301      	bcc.n	8004cde <remove_chain+0x2a>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e04b      	b.n	8004d76 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	69b8      	ldr	r0, [r7, #24]
 8004cec:	f7ff fecb 	bl	8004a86 <put_fat>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004cf4:	7ffb      	ldrb	r3, [r7, #31]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <remove_chain+0x4a>
 8004cfa:	7ffb      	ldrb	r3, [r7, #31]
 8004cfc:	e03b      	b.n	8004d76 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff fdf0 	bl	80048e6 <get_fat>
 8004d06:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d031      	beq.n	8004d72 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <remove_chain+0x64>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e02e      	b.n	8004d76 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d101      	bne.n	8004d24 <remove_chain+0x70>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e028      	b.n	8004d76 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004d24:	2200      	movs	r2, #0
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	69b8      	ldr	r0, [r7, #24]
 8004d2a:	f7ff feac 	bl	8004a86 <put_fat>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <remove_chain+0x88>
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
 8004d3a:	e01c      	b.n	8004d76 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	3b02      	subs	r3, #2
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d20b      	bcs.n	8004d62 <remove_chain+0xae>
			fs->free_clst++;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	791b      	ldrb	r3, [r3, #4]
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d3c6      	bcc.n	8004cfe <remove_chain+0x4a>
 8004d70:	e000      	b.n	8004d74 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004d72:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b088      	sub	sp, #32
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10d      	bne.n	8004db0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <create_chain+0x2c>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d31b      	bcc.n	8004de2 <create_chain+0x64>
 8004daa:	2301      	movs	r3, #1
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	e018      	b.n	8004de2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff fd97 	bl	80048e6 <get_fat>
 8004db8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d801      	bhi.n	8004dc4 <create_chain+0x46>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e070      	b.n	8004ea6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d101      	bne.n	8004dd0 <create_chain+0x52>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	e06a      	b.n	8004ea6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d201      	bcs.n	8004dde <create_chain+0x60>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	e063      	b.n	8004ea6 <create_chain+0x128>
		scl = clst;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d307      	bcc.n	8004e06 <create_chain+0x88>
				ncl = 2;
 8004df6:	2302      	movs	r3, #2
 8004df8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d901      	bls.n	8004e06 <create_chain+0x88>
 8004e02:	2300      	movs	r3, #0
 8004e04:	e04f      	b.n	8004ea6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004e06:	69f9      	ldr	r1, [r7, #28]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fd6c 	bl	80048e6 <get_fat>
 8004e0e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00e      	beq.n	8004e34 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d003      	beq.n	8004e24 <create_chain+0xa6>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d101      	bne.n	8004e28 <create_chain+0xaa>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	e03e      	b.n	8004ea6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d1da      	bne.n	8004de6 <create_chain+0x68>
 8004e30:	2300      	movs	r3, #0
 8004e32:	e038      	b.n	8004ea6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004e34:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004e36:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3a:	69f9      	ldr	r1, [r7, #28]
 8004e3c:	6938      	ldr	r0, [r7, #16]
 8004e3e:	f7ff fe22 	bl	8004a86 <put_fat>
 8004e42:	4603      	mov	r3, r0
 8004e44:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <create_chain+0xe2>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	6938      	ldr	r0, [r7, #16]
 8004e58:	f7ff fe15 	bl	8004a86 <put_fat>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d116      	bne.n	8004e94 <create_chain+0x116>
		fs->last_clst = ncl;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	3b02      	subs	r3, #2
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d804      	bhi.n	8004e84 <create_chain+0x106>
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	1e5a      	subs	r2, r3, #1
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	791b      	ldrb	r3, [r3, #4]
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	711a      	strb	r2, [r3, #4]
 8004e92:	e007      	b.n	8004ea4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d102      	bne.n	8004ea0 <create_chain+0x122>
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	e000      	b.n	8004ea2 <create_chain+0x124>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004ea4:	69fb      	ldr	r3, [r7, #28]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b087      	sub	sp, #28
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	899b      	ldrh	r3, [r3, #12]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	8952      	ldrh	r2, [r2, #10]
 8004ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	613a      	str	r2, [r7, #16]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <clmt_clust+0x42>
 8004eec:	2300      	movs	r3, #0
 8004eee:	e010      	b.n	8004f12 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d307      	bcc.n	8004f08 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	3304      	adds	r3, #4
 8004f04:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f06:	e7e9      	b.n	8004edc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004f08:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4413      	add	r3, r2
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f34:	d204      	bcs.n	8004f40 <dir_sdi+0x22>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004f40:	2302      	movs	r3, #2
 8004f42:	e071      	b.n	8005028 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <dir_sdi+0x46>
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d902      	bls.n	8004f64 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	8912      	ldrh	r2, [r2, #8]
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d301      	bcc.n	8004f7a <dir_sdi+0x5c>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e056      	b.n	8005028 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	61da      	str	r2, [r3, #28]
 8004f82:	e02d      	b.n	8004fe0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	895b      	ldrh	r3, [r3, #10]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	899b      	ldrh	r3, [r3, #12]
 8004f8e:	fb03 f302 	mul.w	r3, r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f94:	e019      	b.n	8004fca <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6979      	ldr	r1, [r7, #20]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fca3 	bl	80048e6 <get_fat>
 8004fa0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d101      	bne.n	8004fae <dir_sdi+0x90>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e03c      	b.n	8005028 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d904      	bls.n	8004fbe <dir_sdi+0xa0>
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d301      	bcc.n	8004fc2 <dir_sdi+0xa4>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e032      	b.n	8005028 <dir_sdi+0x10a>
			ofs -= csz;
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d2e1      	bcs.n	8004f96 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	6938      	ldr	r0, [r7, #16]
 8004fd6:	f7ff fc67 	bl	80048a8 <clust2sect>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <dir_sdi+0xd4>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e01a      	b.n	8005028 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	899b      	ldrh	r3, [r3, #12]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005002:	441a      	add	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	899b      	ldrh	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	fbb3 f0f2 	udiv	r0, r3, r2
 800501a:	fb02 f200 	mul.w	r2, r2, r0
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	18ca      	adds	r2, r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	3320      	adds	r3, #32
 8005046:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <dir_next+0x28>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005056:	d301      	bcc.n	800505c <dir_next+0x2c>
 8005058:	2304      	movs	r3, #4
 800505a:	e0bb      	b.n	80051d4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	899b      	ldrh	r3, [r3, #12]
 8005060:	461a      	mov	r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	fbb3 f1f2 	udiv	r1, r3, r2
 8005068:	fb02 f201 	mul.w	r2, r2, r1
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 809d 	bne.w	80051ae <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	8912      	ldrh	r2, [r2, #8]
 800508e:	4293      	cmp	r3, r2
 8005090:	f0c0 808d 	bcc.w	80051ae <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	61da      	str	r2, [r3, #28]
 800509a:	2304      	movs	r3, #4
 800509c:	e09a      	b.n	80051d4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	899b      	ldrh	r3, [r3, #12]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	8952      	ldrh	r2, [r2, #10]
 80050ae:	3a01      	subs	r2, #1
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d17b      	bne.n	80051ae <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7ff fc11 	bl	80048e6 <get_fat>
 80050c4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d801      	bhi.n	80050d0 <dir_next+0xa0>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e081      	b.n	80051d4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d101      	bne.n	80050dc <dir_next+0xac>
 80050d8:	2301      	movs	r3, #1
 80050da:	e07b      	b.n	80051d4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d359      	bcc.n	800519a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	61da      	str	r2, [r3, #28]
 80050f2:	2304      	movs	r3, #4
 80050f4:	e06e      	b.n	80051d4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7ff fe3d 	bl	8004d7e <create_chain>
 8005104:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <dir_next+0xe0>
 800510c:	2307      	movs	r3, #7
 800510e:	e061      	b.n	80051d4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <dir_next+0xea>
 8005116:	2302      	movs	r3, #2
 8005118:	e05c      	b.n	80051d4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d101      	bne.n	8005126 <dir_next+0xf6>
 8005122:	2301      	movs	r3, #1
 8005124:	e056      	b.n	80051d4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff fadc 	bl	80046e4 <sync_window>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <dir_next+0x106>
 8005132:	2301      	movs	r3, #1
 8005134:	e04e      	b.n	80051d4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	899b      	ldrh	r3, [r3, #12]
 8005140:	461a      	mov	r2, r3
 8005142:	2100      	movs	r1, #0
 8005144:	f7ff f905 	bl	8004352 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	6979      	ldr	r1, [r7, #20]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff fbaa 	bl	80048a8 <clust2sect>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
 800515a:	e012      	b.n	8005182 <dir_next+0x152>
						fs->wflag = 1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff fabe 	bl	80046e4 <sync_window>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <dir_next+0x142>
 800516e:	2301      	movs	r3, #1
 8005170:	e030      	b.n	80051d4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	3301      	adds	r3, #1
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	895b      	ldrh	r3, [r3, #10]
 8005186:	461a      	mov	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4293      	cmp	r3, r2
 800518c:	d3e6      	bcc.n	800515c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad2      	subs	r2, r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80051a0:	6979      	ldr	r1, [r7, #20]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff fb80 	bl	80048a8 <clust2sect>
 80051a8:	4602      	mov	r2, r0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	899b      	ldrh	r3, [r3, #12]
 80051be:	461a      	mov	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80051c6:	fb02 f200 	mul.w	r2, r2, r0
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	18ca      	adds	r2, r1, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80051ec:	2100      	movs	r1, #0
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fe95 	bl	8004f1e <dir_sdi>
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d12b      	bne.n	8005256 <dir_alloc+0x7a>
		n = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4619      	mov	r1, r3
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff faaf 	bl	800476c <move_window>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d11d      	bne.n	8005254 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2be5      	cmp	r3, #229	; 0xe5
 8005220:	d004      	beq.n	800522c <dir_alloc+0x50>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3301      	adds	r3, #1
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d102      	bne.n	8005240 <dir_alloc+0x64>
 800523a:	e00c      	b.n	8005256 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005240:	2101      	movs	r1, #1
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fef4 	bl	8005030 <dir_next>
 8005248:	4603      	mov	r3, r0
 800524a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0d7      	beq.n	8005202 <dir_alloc+0x26>
 8005252:	e000      	b.n	8005256 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005254:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d101      	bne.n	8005260 <dir_alloc+0x84>
 800525c:	2307      	movs	r3, #7
 800525e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	331a      	adds	r3, #26
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe ffc7 	bl	800420c <ld_word>
 800527e:	4603      	mov	r3, r0
 8005280:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b03      	cmp	r3, #3
 8005288:	d109      	bne.n	800529e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe ffbc 	bl	800420c <ld_word>
 8005294:	4603      	mov	r3, r0
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	331a      	adds	r3, #26
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	b292      	uxth	r2, r2
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe ffdf 	bl	8004282 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d109      	bne.n	80052e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f103 0214 	add.w	r2, r3, #20
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7fe ffd1 	bl	8004282 <st_word>
	}
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80052f2:	2304      	movs	r3, #4
 80052f4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80052fc:	e03c      	b.n	8005378 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	4619      	mov	r1, r3
 8005304:	6938      	ldr	r0, [r7, #16]
 8005306:	f7ff fa31 	bl	800476c <move_window>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d136      	bne.n	8005382 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005322:	2304      	movs	r3, #4
 8005324:	75fb      	strb	r3, [r7, #23]
 8005326:	e031      	b.n	800538c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	330b      	adds	r3, #11
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005334:	73bb      	strb	r3, [r7, #14]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	7bba      	ldrb	r2, [r7, #14]
 800533a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2be5      	cmp	r3, #229	; 0xe5
 8005340:	d011      	beq.n	8005366 <dir_read+0x7e>
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	2b2e      	cmp	r3, #46	; 0x2e
 8005346:	d00e      	beq.n	8005366 <dir_read+0x7e>
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	2b0f      	cmp	r3, #15
 800534c:	d00b      	beq.n	8005366 <dir_read+0x7e>
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	f023 0320 	bic.w	r3, r3, #32
 8005354:	2b08      	cmp	r3, #8
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4293      	cmp	r3, r2
 8005364:	d00f      	beq.n	8005386 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005366:	2100      	movs	r1, #0
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fe61 	bl	8005030 <dir_next>
 800536e:	4603      	mov	r3, r0
 8005370:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d108      	bne.n	800538a <dir_read+0xa2>
	while (dp->sect) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1be      	bne.n	80052fe <dir_read+0x16>
 8005380:	e004      	b.n	800538c <dir_read+0xa4>
		if (res != FR_OK) break;
 8005382:	bf00      	nop
 8005384:	e002      	b.n	800538c <dir_read+0xa4>
				break;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <dir_read+0xa4>
		if (res != FR_OK) break;
 800538a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <dir_read+0xb0>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	61da      	str	r2, [r3, #28]
	return res;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b086      	sub	sp, #24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fdb3 	bl	8004f1e <dir_sdi>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <dir_find+0x24>
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	e03e      	b.n	8005444 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4619      	mov	r1, r3
 80053cc:	6938      	ldr	r0, [r7, #16]
 80053ce:	f7ff f9cd 	bl	800476c <move_window>
 80053d2:	4603      	mov	r3, r0
 80053d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d12f      	bne.n	800543c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <dir_find+0x4e>
 80053ea:	2304      	movs	r3, #4
 80053ec:	75fb      	strb	r3, [r7, #23]
 80053ee:	e028      	b.n	8005442 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	330b      	adds	r3, #11
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	330b      	adds	r3, #11
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <dir_find+0x86>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a18      	ldr	r0, [r3, #32]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3324      	adds	r3, #36	; 0x24
 800541a:	220b      	movs	r2, #11
 800541c:	4619      	mov	r1, r3
 800541e:	f7fe ffb2 	bl	8004386 <mem_cmp>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00b      	beq.n	8005440 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005428:	2100      	movs	r1, #0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fe00 	bl	8005030 <dir_next>
 8005430:	4603      	mov	r3, r0
 8005432:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0c5      	beq.n	80053c6 <dir_find+0x24>
 800543a:	e002      	b.n	8005442 <dir_find+0xa0>
		if (res != FR_OK) break;
 800543c:	bf00      	nop
 800543e:	e000      	b.n	8005442 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005440:	bf00      	nop

	return res;
 8005442:	7dfb      	ldrb	r3, [r7, #23]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800545a:	2101      	movs	r1, #1
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff febd 	bl	80051dc <dir_alloc>
 8005462:	4603      	mov	r3, r0
 8005464:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11c      	bne.n	80054a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	4619      	mov	r1, r3
 8005472:	68b8      	ldr	r0, [r7, #8]
 8005474:	f7ff f97a 	bl	800476c <move_window>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d111      	bne.n	80054a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	2220      	movs	r2, #32
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe ff61 	bl	8004352 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a18      	ldr	r0, [r3, #32]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3324      	adds	r3, #36	; 0x24
 8005498:	220b      	movs	r2, #11
 800549a:	4619      	mov	r1, r3
 800549c:	f7fe ff38 	bl	8004310 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2201      	movs	r2, #1
 80054a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	4619      	mov	r1, r3
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff f951 	bl	800476c <move_window>
 80054ca:	4603      	mov	r3, r0
 80054cc:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80054ce:	7afb      	ldrb	r3, [r7, #11]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	22e5      	movs	r2, #229	; 0xe5
 80054da:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80054e2:	7afb      	ldrb	r3, [r7, #11]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2200      	movs	r2, #0
 80054fa:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d04e      	beq.n	80055a2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800550c:	e021      	b.n	8005552 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	1c59      	adds	r1, r3, #1
 8005516:	6179      	str	r1, [r7, #20]
 8005518:	4413      	add	r3, r2
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b20      	cmp	r3, #32
 8005522:	d100      	bne.n	8005526 <get_fileinfo+0x3a>
 8005524:	e015      	b.n	8005552 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b05      	cmp	r3, #5
 800552a:	d101      	bne.n	8005530 <get_fileinfo+0x44>
 800552c:	23e5      	movs	r3, #229	; 0xe5
 800552e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b09      	cmp	r3, #9
 8005534:	d106      	bne.n	8005544 <get_fileinfo+0x58>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	613a      	str	r2, [r7, #16]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	4413      	add	r3, r2
 8005540:	222e      	movs	r2, #46	; 0x2e
 8005542:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	613a      	str	r2, [r7, #16]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	4413      	add	r3, r2
 800554e:	7bfa      	ldrb	r2, [r7, #15]
 8005550:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b0a      	cmp	r3, #10
 8005556:	d9da      	bls.n	800550e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4413      	add	r3, r2
 800555e:	3309      	adds	r3, #9
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	7ada      	ldrb	r2, [r3, #11]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	331c      	adds	r3, #28
 8005574:	4618      	mov	r0, r3
 8005576:	f7fe fe61 	bl	800423c <ld_dword>
 800557a:	4602      	mov	r2, r0
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	3316      	adds	r3, #22
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fe58 	bl	800423c <ld_dword>
 800558c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	b29a      	uxth	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	80da      	strh	r2, [r3, #6]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	0c1b      	lsrs	r3, r3, #16
 800559a:	b29a      	uxth	r2, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	809a      	strh	r2, [r3, #4]
 80055a0:	e000      	b.n	80055a4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80055a2:	bf00      	nop
}
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3324      	adds	r3, #36	; 0x24
 80055c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80055c2:	220b      	movs	r2, #11
 80055c4:	2120      	movs	r1, #32
 80055c6:	68b8      	ldr	r0, [r7, #8]
 80055c8:	f7fe fec3 	bl	8004352 <mem_set>
	si = i = 0; ni = 8;
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	2308      	movs	r3, #8
 80055d6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	617a      	str	r2, [r7, #20]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80055e6:	7ffb      	ldrb	r3, [r7, #31]
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d94e      	bls.n	800568a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80055ec:	7ffb      	ldrb	r3, [r7, #31]
 80055ee:	2b2f      	cmp	r3, #47	; 0x2f
 80055f0:	d006      	beq.n	8005600 <create_name+0x54>
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
 80055f4:	2b5c      	cmp	r3, #92	; 0x5c
 80055f6:	d110      	bne.n	800561a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80055f8:	e002      	b.n	8005600 <create_name+0x54>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3301      	adds	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	4413      	add	r3, r2
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b2f      	cmp	r3, #47	; 0x2f
 800560a:	d0f6      	beq.n	80055fa <create_name+0x4e>
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	4413      	add	r3, r2
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b5c      	cmp	r3, #92	; 0x5c
 8005616:	d0f0      	beq.n	80055fa <create_name+0x4e>
			break;
 8005618:	e038      	b.n	800568c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800561a:	7ffb      	ldrb	r3, [r7, #31]
 800561c:	2b2e      	cmp	r3, #46	; 0x2e
 800561e:	d003      	beq.n	8005628 <create_name+0x7c>
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	429a      	cmp	r2, r3
 8005626:	d30c      	bcc.n	8005642 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b0b      	cmp	r3, #11
 800562c:	d002      	beq.n	8005634 <create_name+0x88>
 800562e:	7ffb      	ldrb	r3, [r7, #31]
 8005630:	2b2e      	cmp	r3, #46	; 0x2e
 8005632:	d001      	beq.n	8005638 <create_name+0x8c>
 8005634:	2306      	movs	r3, #6
 8005636:	e044      	b.n	80056c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005638:	2308      	movs	r3, #8
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	230b      	movs	r3, #11
 800563e:	61bb      	str	r3, [r7, #24]
			continue;
 8005640:	e022      	b.n	8005688 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005642:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005646:	2b00      	cmp	r3, #0
 8005648:	da04      	bge.n	8005654 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800564a:	7ffb      	ldrb	r3, [r7, #31]
 800564c:	3b80      	subs	r3, #128	; 0x80
 800564e:	4a1f      	ldr	r2, [pc, #124]	; (80056cc <create_name+0x120>)
 8005650:	5cd3      	ldrb	r3, [r2, r3]
 8005652:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005654:	7ffb      	ldrb	r3, [r7, #31]
 8005656:	4619      	mov	r1, r3
 8005658:	481d      	ldr	r0, [pc, #116]	; (80056d0 <create_name+0x124>)
 800565a:	f7fe febb 	bl	80043d4 <chk_chr>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <create_name+0xbc>
 8005664:	2306      	movs	r3, #6
 8005666:	e02c      	b.n	80056c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005668:	7ffb      	ldrb	r3, [r7, #31]
 800566a:	2b60      	cmp	r3, #96	; 0x60
 800566c:	d905      	bls.n	800567a <create_name+0xce>
 800566e:	7ffb      	ldrb	r3, [r7, #31]
 8005670:	2b7a      	cmp	r3, #122	; 0x7a
 8005672:	d802      	bhi.n	800567a <create_name+0xce>
 8005674:	7ffb      	ldrb	r3, [r7, #31]
 8005676:	3b20      	subs	r3, #32
 8005678:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	613a      	str	r2, [r7, #16]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	4413      	add	r3, r2
 8005684:	7ffa      	ldrb	r2, [r7, #31]
 8005686:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005688:	e7a6      	b.n	80055d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800568a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	441a      	add	r2, r3
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <create_name+0xf4>
 800569c:	2306      	movs	r3, #6
 800569e:	e010      	b.n	80056c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2be5      	cmp	r3, #229	; 0xe5
 80056a6:	d102      	bne.n	80056ae <create_name+0x102>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2205      	movs	r2, #5
 80056ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80056ae:	7ffb      	ldrb	r3, [r7, #31]
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d801      	bhi.n	80056b8 <create_name+0x10c>
 80056b4:	2204      	movs	r2, #4
 80056b6:	e000      	b.n	80056ba <create_name+0x10e>
 80056b8:	2200      	movs	r2, #0
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	330b      	adds	r3, #11
 80056be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80056c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	08007b58 	.word	0x08007b58
 80056d0:	08007a88 	.word	0x08007a88

080056d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80056e8:	e002      	b.n	80056f0 <follow_path+0x1c>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b2f      	cmp	r3, #47	; 0x2f
 80056f6:	d0f8      	beq.n	80056ea <follow_path+0x16>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b5c      	cmp	r3, #92	; 0x5c
 80056fe:	d0f4      	beq.n	80056ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2200      	movs	r2, #0
 8005704:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b1f      	cmp	r3, #31
 800570c:	d80a      	bhi.n	8005724 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2280      	movs	r2, #128	; 0x80
 8005712:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005716:	2100      	movs	r1, #0
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fc00 	bl	8004f1e <dir_sdi>
 800571e:	4603      	mov	r3, r0
 8005720:	75fb      	strb	r3, [r7, #23]
 8005722:	e048      	b.n	80057b6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005724:	463b      	mov	r3, r7
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff3f 	bl	80055ac <create_name>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d139      	bne.n	80057ac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff fe32 	bl	80053a2 <dir_find>
 800573e:	4603      	mov	r3, r0
 8005740:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005748:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	2b04      	cmp	r3, #4
 8005754:	d12c      	bne.n	80057b0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005756:	7afb      	ldrb	r3, [r7, #11]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d127      	bne.n	80057b0 <follow_path+0xdc>
 8005760:	2305      	movs	r3, #5
 8005762:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005764:	e024      	b.n	80057b0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d121      	bne.n	80057b4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	799b      	ldrb	r3, [r3, #6]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800577c:	2305      	movs	r3, #5
 800577e:	75fb      	strb	r3, [r7, #23]
 8005780:	e019      	b.n	80057b6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	8992      	ldrh	r2, [r2, #12]
 8005790:	fbb3 f0f2 	udiv	r0, r3, r2
 8005794:	fb02 f200 	mul.w	r2, r2, r0
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	440b      	add	r3, r1
 800579c:	4619      	mov	r1, r3
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f7ff fd63 	bl	800526a <ld_clust>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057aa:	e7bb      	b.n	8005724 <follow_path+0x50>
			if (res != FR_OK) break;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <follow_path+0xe2>
				break;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057b4:	bf00      	nop
			}
		}
	}

	return res;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295
 80057cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d031      	beq.n	800583a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e002      	b.n	80057e4 <get_ldnumber+0x24>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	3301      	adds	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d903      	bls.n	80057f4 <get_ldnumber+0x34>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b3a      	cmp	r3, #58	; 0x3a
 80057f2:	d1f4      	bne.n	80057de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b3a      	cmp	r3, #58	; 0x3a
 80057fa:	d11c      	bne.n	8005836 <get_ldnumber+0x76>
			tp = *path;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	60fa      	str	r2, [r7, #12]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	3b30      	subs	r3, #48	; 0x30
 800580c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b09      	cmp	r3, #9
 8005812:	d80e      	bhi.n	8005832 <get_ldnumber+0x72>
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	429a      	cmp	r2, r3
 800581a:	d10a      	bne.n	8005832 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <get_ldnumber+0x72>
					vol = (int)i;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	3301      	adds	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	e002      	b.n	800583c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800583a:	693b      	ldr	r3, [r7, #16]
}
 800583c:	4618      	mov	r0, r3
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	70da      	strb	r2, [r3, #3]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fe ff82 	bl	800476c <move_window>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <check_fs+0x2a>
 800586e:	2304      	movs	r3, #4
 8005870:	e038      	b.n	80058e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3334      	adds	r3, #52	; 0x34
 8005876:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fcc6 	bl	800420c <ld_word>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005888:	429a      	cmp	r2, r3
 800588a:	d001      	beq.n	8005890 <check_fs+0x48>
 800588c:	2303      	movs	r3, #3
 800588e:	e029      	b.n	80058e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005896:	2be9      	cmp	r3, #233	; 0xe9
 8005898:	d009      	beq.n	80058ae <check_fs+0x66>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058a0:	2beb      	cmp	r3, #235	; 0xeb
 80058a2:	d11e      	bne.n	80058e2 <check_fs+0x9a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80058aa:	2b90      	cmp	r3, #144	; 0x90
 80058ac:	d119      	bne.n	80058e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3334      	adds	r3, #52	; 0x34
 80058b2:	3336      	adds	r3, #54	; 0x36
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fcc1 	bl	800423c <ld_dword>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058c0:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <check_fs+0xa4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <check_fs+0x82>
 80058c6:	2300      	movs	r3, #0
 80058c8:	e00c      	b.n	80058e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3334      	adds	r3, #52	; 0x34
 80058ce:	3352      	adds	r3, #82	; 0x52
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe fcb3 	bl	800423c <ld_dword>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <check_fs+0xa8>)
 80058da:	429a      	cmp	r2, r3
 80058dc:	d101      	bne.n	80058e2 <check_fs+0x9a>
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80058e2:	2302      	movs	r3, #2
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	00544146 	.word	0x00544146
 80058f0:	33544146 	.word	0x33544146

080058f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b096      	sub	sp, #88	; 0x58
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff ff59 	bl	80057c0 <get_ldnumber>
 800590e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005912:	2b00      	cmp	r3, #0
 8005914:	da01      	bge.n	800591a <find_volume+0x26>
 8005916:	230b      	movs	r3, #11
 8005918:	e265      	b.n	8005de6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800591a:	4ab0      	ldr	r2, [pc, #704]	; (8005bdc <find_volume+0x2e8>)
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005922:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <find_volume+0x3a>
 800592a:	230c      	movs	r3, #12
 800592c:	e25b      	b.n	8005de6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005932:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	f023 0301 	bic.w	r3, r3, #1
 800593a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe fbc1 	bl	80040d0 <disk_status>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005954:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10c      	bne.n	800597a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <find_volume+0x82>
 8005966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005972:	230a      	movs	r3, #10
 8005974:	e237      	b.n	8005de6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005976:	2300      	movs	r3, #0
 8005978:	e235      	b.n	8005de6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	b2da      	uxtb	r2, r3
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe fbb9 	bl	8004104 <disk_initialize>
 8005992:	4603      	mov	r3, r0
 8005994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80059a4:	2303      	movs	r3, #3
 80059a6:	e21e      	b.n	8005de6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <find_volume+0xca>
 80059ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80059ba:	230a      	movs	r3, #10
 80059bc:	e213      	b.n	8005de6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	7858      	ldrb	r0, [r3, #1]
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	330c      	adds	r3, #12
 80059c6:	461a      	mov	r2, r3
 80059c8:	2102      	movs	r1, #2
 80059ca:	f7fe fc01 	bl	80041d0 <disk_ioctl>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <find_volume+0xe4>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e206      	b.n	8005de6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	899b      	ldrh	r3, [r3, #12]
 80059dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e0:	d80d      	bhi.n	80059fe <find_volume+0x10a>
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	899b      	ldrh	r3, [r3, #12]
 80059e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ea:	d308      	bcc.n	80059fe <find_volume+0x10a>
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	899b      	ldrh	r3, [r3, #12]
 80059f0:	461a      	mov	r2, r3
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	899b      	ldrh	r3, [r3, #12]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <find_volume+0x10e>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e1f1      	b.n	8005de6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a0a:	f7ff ff1d 	bl	8005848 <check_fs>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d14b      	bne.n	8005ab4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a20:	e01f      	b.n	8005a62 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005a30:	4413      	add	r3, r2
 8005a32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	3304      	adds	r3, #4
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d006      	beq.n	8005a4c <find_volume+0x158>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	3308      	adds	r3, #8
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe fbfa 	bl	800423c <ld_dword>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	e000      	b.n	8005a4e <find_volume+0x15a>
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005a56:	440b      	add	r3, r1
 8005a58:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5e:	3301      	adds	r3, #1
 8005a60:	643b      	str	r3, [r7, #64]	; 0x40
 8005a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d9dc      	bls.n	8005a22 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005a68:	2300      	movs	r3, #0
 8005a6a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <find_volume+0x184>
 8005a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a74:	3b01      	subs	r3, #1
 8005a76:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005a80:	4413      	add	r3, r2
 8005a82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005a86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <find_volume+0x1a6>
 8005a8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a92:	f7ff fed9 	bl	8005848 <check_fs>
 8005a96:	4603      	mov	r3, r0
 8005a98:	e000      	b.n	8005a9c <find_volume+0x1a8>
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d905      	bls.n	8005ab4 <find_volume+0x1c0>
 8005aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aaa:	3301      	adds	r3, #1
 8005aac:	643b      	str	r3, [r7, #64]	; 0x40
 8005aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d9e1      	bls.n	8005a78 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d101      	bne.n	8005ac0 <find_volume+0x1cc>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e192      	b.n	8005de6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d901      	bls.n	8005acc <find_volume+0x1d8>
 8005ac8:	230d      	movs	r3, #13
 8005aca:	e18c      	b.n	8005de6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	3334      	adds	r3, #52	; 0x34
 8005ad0:	330b      	adds	r3, #11
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fb9a 	bl	800420c <ld_word>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	899b      	ldrh	r3, [r3, #12]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <find_volume+0x1f4>
 8005ae4:	230d      	movs	r3, #13
 8005ae6:	e17e      	b.n	8005de6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	3334      	adds	r3, #52	; 0x34
 8005aec:	3316      	adds	r3, #22
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fb8c 	bl	800420c <ld_word>
 8005af4:	4603      	mov	r3, r0
 8005af6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <find_volume+0x218>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	3334      	adds	r3, #52	; 0x34
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fb99 	bl	800423c <ld_dword>
 8005b0a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b10:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	789b      	ldrb	r3, [r3, #2]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d005      	beq.n	8005b30 <find_volume+0x23c>
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	789b      	ldrb	r3, [r3, #2]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d001      	beq.n	8005b30 <find_volume+0x23c>
 8005b2c:	230d      	movs	r3, #13
 8005b2e:	e15a      	b.n	8005de6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	789b      	ldrb	r3, [r3, #2]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	fb02 f303 	mul.w	r3, r2, r3
 8005b3c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	895b      	ldrh	r3, [r3, #10]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <find_volume+0x270>
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	895b      	ldrh	r3, [r3, #10]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	895b      	ldrh	r3, [r3, #10]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <find_volume+0x274>
 8005b64:	230d      	movs	r3, #13
 8005b66:	e13e      	b.n	8005de6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	3334      	adds	r3, #52	; 0x34
 8005b6c:	3311      	adds	r3, #17
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fb4c 	bl	800420c <ld_word>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	891b      	ldrh	r3, [r3, #8]
 8005b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b82:	8992      	ldrh	r2, [r2, #12]
 8005b84:	0952      	lsrs	r2, r2, #5
 8005b86:	b292      	uxth	r2, r2
 8005b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b8c:	fb02 f201 	mul.w	r2, r2, r1
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <find_volume+0x2a8>
 8005b98:	230d      	movs	r3, #13
 8005b9a:	e124      	b.n	8005de6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	3334      	adds	r3, #52	; 0x34
 8005ba0:	3313      	adds	r3, #19
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fb32 	bl	800420c <ld_word>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <find_volume+0x2cc>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	3334      	adds	r3, #52	; 0x34
 8005bb6:	3320      	adds	r3, #32
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fb3f 	bl	800423c <ld_dword>
 8005bbe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	3334      	adds	r3, #52	; 0x34
 8005bc4:	330e      	adds	r3, #14
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe fb20 	bl	800420c <ld_word>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005bd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <find_volume+0x2ec>
 8005bd6:	230d      	movs	r3, #13
 8005bd8:	e105      	b.n	8005de6 <find_volume+0x4f2>
 8005bda:	bf00      	nop
 8005bdc:	20000090 	.word	0x20000090

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005be0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be4:	4413      	add	r3, r2
 8005be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be8:	8911      	ldrh	r1, [r2, #8]
 8005bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bec:	8992      	ldrh	r2, [r2, #12]
 8005bee:	0952      	lsrs	r2, r2, #5
 8005bf0:	b292      	uxth	r2, r2
 8005bf2:	fbb1 f2f2 	udiv	r2, r1, r2
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d201      	bcs.n	8005c08 <find_volume+0x314>
 8005c04:	230d      	movs	r3, #13
 8005c06:	e0ee      	b.n	8005de6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c10:	8952      	ldrh	r2, [r2, #10]
 8005c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <find_volume+0x32e>
 8005c1e:	230d      	movs	r3, #13
 8005c20:	e0e1      	b.n	8005de6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005c22:	2303      	movs	r3, #3
 8005c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d802      	bhi.n	8005c38 <find_volume+0x344>
 8005c32:	2302      	movs	r3, #2
 8005c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d802      	bhi.n	8005c48 <find_volume+0x354>
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	1c9a      	adds	r2, r3, #2
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c54:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5a:	441a      	add	r2, r3
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	441a      	add	r2, r3
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d11e      	bne.n	8005cb0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	3334      	adds	r3, #52	; 0x34
 8005c76:	332a      	adds	r3, #42	; 0x2a
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe fac7 	bl	800420c <ld_word>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <find_volume+0x394>
 8005c84:	230d      	movs	r3, #13
 8005c86:	e0ae      	b.n	8005de6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	891b      	ldrh	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <find_volume+0x3a0>
 8005c90:	230d      	movs	r3, #13
 8005c92:	e0a8      	b.n	8005de6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	3334      	adds	r3, #52	; 0x34
 8005c98:	332c      	adds	r3, #44	; 0x2c
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe face 	bl	800423c <ld_dword>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	647b      	str	r3, [r7, #68]	; 0x44
 8005cae:	e01f      	b.n	8005cf0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	891b      	ldrh	r3, [r3, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <find_volume+0x3c8>
 8005cb8:	230d      	movs	r3, #13
 8005cba:	e094      	b.n	8005de6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc2:	441a      	add	r2, r3
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d103      	bne.n	8005cd8 <find_volume+0x3e4>
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	e00a      	b.n	8005cee <find_volume+0x3fa>
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	085a      	lsrs	r2, r3, #1
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005cee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	899b      	ldrh	r3, [r3, #12]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfc:	440b      	add	r3, r1
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d02:	8989      	ldrh	r1, [r1, #12]
 8005d04:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d201      	bcs.n	8005d10 <find_volume+0x41c>
 8005d0c:	230d      	movs	r3, #13
 8005d0e:	e06a      	b.n	8005de6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295
 8005d16:	615a      	str	r2, [r3, #20]
 8005d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d149      	bne.n	8005dc2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	3334      	adds	r3, #52	; 0x34
 8005d32:	3330      	adds	r3, #48	; 0x30
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fe fa69 	bl	800420c <ld_word>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d140      	bne.n	8005dc2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d42:	3301      	adds	r3, #1
 8005d44:	4619      	mov	r1, r3
 8005d46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d48:	f7fe fd10 	bl	800476c <move_window>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d137      	bne.n	8005dc2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	2200      	movs	r2, #0
 8005d56:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	3334      	adds	r3, #52	; 0x34
 8005d5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe fa53 	bl	800420c <ld_word>
 8005d66:	4603      	mov	r3, r0
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d127      	bne.n	8005dc2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	3334      	adds	r3, #52	; 0x34
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fa60 	bl	800423c <ld_dword>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <find_volume+0x4fc>)
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d11e      	bne.n	8005dc2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	3334      	adds	r3, #52	; 0x34
 8005d88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe fa55 	bl	800423c <ld_dword>
 8005d92:	4602      	mov	r2, r0
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <find_volume+0x500>)
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d113      	bne.n	8005dc2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	3334      	adds	r3, #52	; 0x34
 8005d9e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe fa4a 	bl	800423c <ld_dword>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	3334      	adds	r3, #52	; 0x34
 8005db2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fa40 	bl	800423c <ld_dword>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005dc8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <find_volume+0x504>)
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <find_volume+0x504>)
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	4b08      	ldr	r3, [pc, #32]	; (8005df8 <find_volume+0x504>)
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005dde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005de0:	f7fe fc5c 	bl	800469c <clear_lock>
#endif
	return FR_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3758      	adds	r7, #88	; 0x58
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	41615252 	.word	0x41615252
 8005df4:	61417272 	.word	0x61417272
 8005df8:	20000094 	.word	0x20000094

08005dfc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005e06:	2309      	movs	r3, #9
 8005e08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01c      	beq.n	8005e4a <validate+0x4e>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d018      	beq.n	8005e4a <validate+0x4e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d013      	beq.n	8005e4a <validate+0x4e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	889a      	ldrh	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	88db      	ldrh	r3, [r3, #6]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d10c      	bne.n	8005e4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe f94a 	bl	80040d0 <disk_status>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <validate+0x4e>
			res = FR_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <validate+0x5a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	e000      	b.n	8005e58 <validate+0x5c>
 8005e56:	2300      	movs	r3, #0
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	6013      	str	r3, [r2, #0]
	return res;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005e7a:	f107 0310 	add.w	r3, r7, #16
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fc9e 	bl	80057c0 <get_ldnumber>
 8005e84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da01      	bge.n	8005e90 <f_mount+0x28>
 8005e8c:	230b      	movs	r3, #11
 8005e8e:	e02b      	b.n	8005ee8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <f_mount+0x88>)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005ea0:	69b8      	ldr	r0, [r7, #24]
 8005ea2:	f7fe fbfb 	bl	800469c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	490d      	ldr	r1, [pc, #52]	; (8005ef0 <f_mount+0x88>)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <f_mount+0x66>
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d001      	beq.n	8005ed2 <f_mount+0x6a>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e00a      	b.n	8005ee8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ed2:	f107 010c 	add.w	r1, r7, #12
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	2200      	movs	r2, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fd09 	bl	80058f4 <find_volume>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000090 	.word	0x20000090

08005ef4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b098      	sub	sp, #96	; 0x60
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	4613      	mov	r3, r2
 8005f00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <f_open+0x18>
 8005f08:	2309      	movs	r3, #9
 8005f0a:	e1bb      	b.n	8006284 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005f14:	79fa      	ldrb	r2, [r7, #7]
 8005f16:	f107 0110 	add.w	r1, r7, #16
 8005f1a:	f107 0308 	add.w	r3, r7, #8
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fce8 	bl	80058f4 <find_volume>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005f2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 819f 	bne.w	8006272 <f_open+0x37e>
		dj.obj.fs = fs;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	f107 0314 	add.w	r3, r7, #20
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fbc7 	bl	80056d4 <follow_path>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11a      	bne.n	8005f8a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005f54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f58:	b25b      	sxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da03      	bge.n	8005f66 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005f5e:	2306      	movs	r3, #6
 8005f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005f64:	e011      	b.n	8005f8a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	f107 0314 	add.w	r3, r7, #20
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fa44 	bl	800440c <chk_lock>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	f003 031c 	and.w	r3, r3, #28
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d07f      	beq.n	8006094 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005f94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d017      	beq.n	8005fcc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d10e      	bne.n	8005fc2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005fa4:	f7fe fa8e 	bl	80044c4 <enq_lock>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d006      	beq.n	8005fbc <f_open+0xc8>
 8005fae:	f107 0314 	add.w	r3, r7, #20
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fa4a 	bl	800544c <dir_register>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	e000      	b.n	8005fbe <f_open+0xca>
 8005fbc:	2312      	movs	r3, #18
 8005fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	f043 0308 	orr.w	r3, r3, #8
 8005fc8:	71fb      	strb	r3, [r7, #7]
 8005fca:	e010      	b.n	8005fee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005fcc:	7ebb      	ldrb	r3, [r7, #26]
 8005fce:	f003 0311 	and.w	r3, r3, #17
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <f_open+0xea>
					res = FR_DENIED;
 8005fd6:	2307      	movs	r3, #7
 8005fd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005fdc:	e007      	b.n	8005fee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <f_open+0xfa>
 8005fe8:	2308      	movs	r3, #8
 8005fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005fee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d168      	bne.n	80060c8 <f_open+0x1d4>
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d063      	beq.n	80060c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006000:	f7fd feec 	bl	8003ddc <get_fattime>
 8006004:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	330e      	adds	r3, #14
 800600a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800600c:	4618      	mov	r0, r3
 800600e:	f7fe f953 	bl	80042b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006014:	3316      	adds	r3, #22
 8006016:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe f94d 	bl	80042b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800601e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006020:	330b      	adds	r3, #11
 8006022:	2220      	movs	r2, #32
 8006024:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff f91c 	bl	800526a <ld_clust>
 8006032:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006038:	2200      	movs	r2, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff f934 	bl	80052a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	331c      	adds	r3, #28
 8006044:	2100      	movs	r1, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe f936 	bl	80042b8 <st_dword>
					fs->wflag = 1;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2201      	movs	r2, #1
 8006050:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d037      	beq.n	80060c8 <f_open+0x1d4>
						dw = fs->winsect;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800605e:	f107 0314 	add.w	r3, r7, #20
 8006062:	2200      	movs	r2, #0
 8006064:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fe24 	bl	8004cb4 <remove_chain>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006072:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006076:	2b00      	cmp	r3, #0
 8006078:	d126      	bne.n	80060c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fb74 	bl	800476c <move_window>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800608e:	3a01      	subs	r2, #1
 8006090:	611a      	str	r2, [r3, #16]
 8006092:	e019      	b.n	80060c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006094:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006098:	2b00      	cmp	r3, #0
 800609a:	d115      	bne.n	80060c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800609c:	7ebb      	ldrb	r3, [r7, #26]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <f_open+0x1ba>
					res = FR_NO_FILE;
 80060a6:	2304      	movs	r3, #4
 80060a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060ac:	e00c      	b.n	80060c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <f_open+0x1d4>
 80060b8:	7ebb      	ldrb	r3, [r7, #26]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <f_open+0x1d4>
						res = FR_DENIED;
 80060c2:	2307      	movs	r3, #7
 80060c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80060c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d128      	bne.n	8006122 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80060ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060f0:	79fb      	ldrb	r3, [r7, #7]
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bf14      	ite	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	2300      	moveq	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	f107 0314 	add.w	r3, r7, #20
 8006106:	4611      	mov	r1, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f7fe f9fd 	bl	8004508 <inc_lock>
 800610e:	4602      	mov	r2, r0
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <f_open+0x22e>
 800611c:	2302      	movs	r3, #2
 800611e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 80a3 	bne.w	8006272 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff f899 	bl	800526a <ld_clust>
 8006138:	4602      	mov	r2, r0
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	331c      	adds	r3, #28
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe f87a 	bl	800423c <ld_dword>
 8006148:	4602      	mov	r2, r0
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	88da      	ldrh	r2, [r3, #6]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	79fa      	ldrb	r2, [r7, #7]
 8006166:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3330      	adds	r3, #48	; 0x30
 800617e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe f8e4 	bl	8004352 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	d06e      	beq.n	8006272 <f_open+0x37e>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d06a      	beq.n	8006272 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	895b      	ldrh	r3, [r3, #10]
 80061a8:	461a      	mov	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	899b      	ldrh	r3, [r3, #12]
 80061ae:	fb03 f302 	mul.w	r3, r3, r2
 80061b2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	657b      	str	r3, [r7, #84]	; 0x54
 80061c0:	e016      	b.n	80061f0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fb8d 	bl	80048e6 <get_fat>
 80061cc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80061ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d802      	bhi.n	80061da <f_open+0x2e6>
 80061d4:	2302      	movs	r3, #2
 80061d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80061da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d102      	bne.n	80061e8 <f_open+0x2f4>
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	657b      	str	r3, [r7, #84]	; 0x54
 80061f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d103      	bne.n	8006200 <f_open+0x30c>
 80061f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d8e0      	bhi.n	80061c2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006204:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800620a:	2b00      	cmp	r3, #0
 800620c:	d131      	bne.n	8006272 <f_open+0x37e>
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	899b      	ldrh	r3, [r3, #12]
 8006212:	461a      	mov	r2, r3
 8006214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006216:	fbb3 f1f2 	udiv	r1, r3, r2
 800621a:	fb02 f201 	mul.w	r2, r2, r1
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d026      	beq.n	8006272 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fb3d 	bl	80048a8 <clust2sect>
 800622e:	6478      	str	r0, [r7, #68]	; 0x44
 8006230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <f_open+0x34a>
						res = FR_INT_ERR;
 8006236:	2302      	movs	r3, #2
 8006238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800623c:	e019      	b.n	8006272 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	899b      	ldrh	r3, [r3, #12]
 8006242:	461a      	mov	r2, r3
 8006244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006246:	fbb3 f2f2 	udiv	r2, r3, r2
 800624a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624c:	441a      	add	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	7858      	ldrb	r0, [r3, #1]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1a      	ldr	r2, [r3, #32]
 8006260:	2301      	movs	r3, #1
 8006262:	f7fd ff75 	bl	8004150 <disk_read>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <f_open+0x37e>
 800626c:	2301      	movs	r3, #1
 800626e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <f_open+0x38c>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006284:	4618      	mov	r0, r3
 8006286:	3760      	adds	r7, #96	; 0x60
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08e      	sub	sp, #56	; 0x38
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f107 0214 	add.w	r2, r7, #20
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fda5 	bl	8005dfc <validate>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80062b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <f_read+0x44>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	7d5b      	ldrb	r3, [r3, #21]
 80062c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80062c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <f_read+0x4a>
 80062d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062d4:	e135      	b.n	8006542 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	7d1b      	ldrb	r3, [r3, #20]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <f_read+0x5a>
 80062e2:	2307      	movs	r3, #7
 80062e4:	e12d      	b.n	8006542 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	f240 811e 	bls.w	8006538 <f_read+0x2ac>
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006300:	e11a      	b.n	8006538 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	8992      	ldrh	r2, [r2, #12]
 800630a:	fbb3 f1f2 	udiv	r1, r3, r2
 800630e:	fb02 f201 	mul.w	r2, r2, r1
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	f040 80d5 	bne.w	80064c4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	8992      	ldrh	r2, [r2, #12]
 8006322:	fbb3 f3f2 	udiv	r3, r3, r2
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	8952      	ldrh	r2, [r2, #10]
 800632a:	3a01      	subs	r2, #1
 800632c:	4013      	ands	r3, r2
 800632e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d12f      	bne.n	8006396 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
 8006344:	e013      	b.n	800636e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	4619      	mov	r1, r3
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7fe fdaa 	bl	8004eae <clmt_clust>
 800635a:	6338      	str	r0, [r7, #48]	; 0x30
 800635c:	e007      	b.n	800636e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7fe fabd 	bl	80048e6 <get_fat>
 800636c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	2b01      	cmp	r3, #1
 8006372:	d804      	bhi.n	800637e <f_read+0xf2>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2202      	movs	r2, #2
 8006378:	755a      	strb	r2, [r3, #21]
 800637a:	2302      	movs	r3, #2
 800637c:	e0e1      	b.n	8006542 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d104      	bne.n	8006390 <f_read+0x104>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	755a      	strb	r2, [r3, #21]
 800638c:	2301      	movs	r3, #1
 800638e:	e0d8      	b.n	8006542 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006394:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f7fe fa82 	bl	80048a8 <clust2sect>
 80063a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <f_read+0x12a>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2202      	movs	r2, #2
 80063b0:	755a      	strb	r2, [r3, #21]
 80063b2:	2302      	movs	r3, #2
 80063b4:	e0c5      	b.n	8006542 <f_read+0x2b6>
			sect += csect;
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	4413      	add	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	899b      	ldrh	r3, [r3, #12]
 80063c2:	461a      	mov	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d041      	beq.n	8006456 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	4413      	add	r3, r2
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	8952      	ldrh	r2, [r2, #10]
 80063dc:	4293      	cmp	r3, r2
 80063de:	d905      	bls.n	80063ec <f_read+0x160>
					cc = fs->csize - csect;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	895b      	ldrh	r3, [r3, #10]
 80063e4:	461a      	mov	r2, r3
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	7858      	ldrb	r0, [r3, #1]
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063f6:	f7fd feab 	bl	8004150 <disk_read>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <f_read+0x17e>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	755a      	strb	r2, [r3, #21]
 8006406:	2301      	movs	r3, #1
 8006408:	e09b      	b.n	8006542 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	7d1b      	ldrb	r3, [r3, #20]
 800640e:	b25b      	sxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	da18      	bge.n	8006446 <f_read+0x1ba>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1a      	ldr	r2, [r3, #32]
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641e:	429a      	cmp	r2, r3
 8006420:	d911      	bls.n	8006446 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1a      	ldr	r2, [r3, #32]
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	8992      	ldrh	r2, [r2, #12]
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006434:	18d0      	adds	r0, r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	899b      	ldrh	r3, [r3, #12]
 8006440:	461a      	mov	r2, r3
 8006442:	f7fd ff65 	bl	8004310 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	899b      	ldrh	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006454:	e05c      	b.n	8006510 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	429a      	cmp	r2, r3
 800645e:	d02e      	beq.n	80064be <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	7d1b      	ldrb	r3, [r3, #20]
 8006464:	b25b      	sxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	da18      	bge.n	800649c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	7858      	ldrb	r0, [r3, #1]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	2301      	movs	r3, #1
 800647a:	f7fd fe89 	bl	8004190 <disk_write>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <f_read+0x202>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	755a      	strb	r2, [r3, #21]
 800648a:	2301      	movs	r3, #1
 800648c:	e059      	b.n	8006542 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	7d1b      	ldrb	r3, [r3, #20]
 8006492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006496:	b2da      	uxtb	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	7858      	ldrb	r0, [r3, #1]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064a6:	2301      	movs	r3, #1
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	f7fd fe51 	bl	8004150 <disk_read>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <f_read+0x232>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	755a      	strb	r2, [r3, #21]
 80064ba:	2301      	movs	r3, #1
 80064bc:	e041      	b.n	8006542 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	899b      	ldrh	r3, [r3, #12]
 80064c8:	4618      	mov	r0, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	8992      	ldrh	r2, [r2, #12]
 80064d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80064d6:	fb02 f201 	mul.w	r2, r2, r1
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	1ac3      	subs	r3, r0, r3
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80064e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d901      	bls.n	80064ec <f_read+0x260>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	8992      	ldrh	r2, [r2, #12]
 80064fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80064fe:	fb02 f200 	mul.w	r2, r2, r0
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	440b      	add	r3, r1
 8006506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006508:	4619      	mov	r1, r3
 800650a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800650c:	f7fd ff00 	bl	8004310 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	4413      	add	r3, r2
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699a      	ldr	r2, [r3, #24]
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	441a      	add	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	619a      	str	r2, [r3, #24]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	441a      	add	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f47f aee1 	bne.w	8006302 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3738      	adds	r7, #56	; 0x38
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b086      	sub	sp, #24
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f107 0208 	add.w	r2, r7, #8
 8006558:	4611      	mov	r1, r2
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fc4e 	bl	8005dfc <validate>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d168      	bne.n	800663c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7d1b      	ldrb	r3, [r3, #20]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d062      	beq.n	800663c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	7d1b      	ldrb	r3, [r3, #20]
 800657a:	b25b      	sxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	da15      	bge.n	80065ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	7858      	ldrb	r0, [r3, #1]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	2301      	movs	r3, #1
 8006590:	f7fd fdfe 	bl	8004190 <disk_write>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <f_sync+0x54>
 800659a:	2301      	movs	r3, #1
 800659c:	e04f      	b.n	800663e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	7d1b      	ldrb	r3, [r3, #20]
 80065a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80065ac:	f7fd fc16 	bl	8003ddc <get_fattime>
 80065b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	4619      	mov	r1, r3
 80065ba:	4610      	mov	r0, r2
 80065bc:	f7fe f8d6 	bl	800476c <move_window>
 80065c0:	4603      	mov	r3, r0
 80065c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d138      	bne.n	800663c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	330b      	adds	r3, #11
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	330b      	adds	r3, #11
 80065da:	f042 0220 	orr.w	r2, r2, #32
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	461a      	mov	r2, r3
 80065ec:	68f9      	ldr	r1, [r7, #12]
 80065ee:	f7fe fe5b 	bl	80052a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f103 021c 	add.w	r2, r3, #28
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f7fd fe5a 	bl	80042b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3316      	adds	r3, #22
 8006608:	6939      	ldr	r1, [r7, #16]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fd fe54 	bl	80042b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3312      	adds	r3, #18
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f7fd fe33 	bl	8004282 <st_word>
					fs->wflag = 1;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2201      	movs	r2, #1
 8006620:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe f8cf 	bl	80047c8 <sync_fs>
 800662a:	4603      	mov	r3, r0
 800662c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7d1b      	ldrb	r3, [r3, #20]
 8006632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006636:	b2da      	uxtb	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800663c:	7dfb      	ldrb	r3, [r7, #23]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff ff7b 	bl	800654a <f_sync>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d118      	bne.n	8006690 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f107 0208 	add.w	r2, r7, #8
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fbc8 	bl	8005dfc <validate>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10c      	bne.n	8006690 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	4618      	mov	r0, r3
 800667c:	f7fd ffd2 	bl	8004624 <dec_lock>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d102      	bne.n	8006690 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b090      	sub	sp, #64	; 0x40
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80066a4:	f107 010c 	add.w	r1, r7, #12
 80066a8:	1d3b      	adds	r3, r7, #4
 80066aa:	2200      	movs	r2, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff f921 	bl	80058f4 <find_volume>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80066b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11f      	bne.n	8006700 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	f107 030c 	add.w	r3, r7, #12
 80066c6:	4611      	mov	r1, r2
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff f803 	bl	80056d4 <follow_path>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80066d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d111      	bne.n	8006700 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80066dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80066e0:	b25b      	sxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da03      	bge.n	80066ee <f_stat+0x54>
				res = FR_INVALID_NAME;
 80066e6:	2306      	movs	r3, #6
 80066e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80066ec:	e008      	b.n	8006700 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <f_stat+0x66>
 80066f4:	f107 030c 	add.w	r3, r7, #12
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fef6 	bl	80054ec <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8006700:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006704:	4618      	mov	r0, r3
 8006706:	3740      	adds	r7, #64	; 0x40
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b09e      	sub	sp, #120	; 0x78
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8006718:	f107 010c 	add.w	r1, r7, #12
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	2202      	movs	r2, #2
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff f8e7 	bl	80058f4 <find_volume>
 8006726:	4603      	mov	r3, r0
 8006728:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8006730:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006734:	2b00      	cmp	r3, #0
 8006736:	f040 808e 	bne.w	8006856 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006740:	4611      	mov	r1, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe ffc6 	bl	80056d4 <follow_path>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800674e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006752:	2b00      	cmp	r3, #0
 8006754:	d108      	bne.n	8006768 <f_unlink+0x5c>
 8006756:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800675a:	2102      	movs	r1, #2
 800675c:	4618      	mov	r0, r3
 800675e:	f7fd fe55 	bl	800440c <chk_lock>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006768:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800676c:	2b00      	cmp	r3, #0
 800676e:	d172      	bne.n	8006856 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006770:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006774:	b25b      	sxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	da03      	bge.n	8006782 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800677a:	2306      	movs	r3, #6
 800677c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006780:	e008      	b.n	8006794 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8006782:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800678e:	2307      	movs	r3, #7
 8006790:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8006794:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006798:	2b00      	cmp	r3, #0
 800679a:	d134      	bne.n	8006806 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067a0:	4611      	mov	r1, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe fd61 	bl	800526a <ld_clust>
 80067a8:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80067aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d027      	beq.n	8006806 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80067ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067bc:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80067be:	f107 0310 	add.w	r3, r7, #16
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fbaa 	bl	8004f1e <dir_sdi>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80067d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d116      	bne.n	8006806 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80067d8:	f107 0310 	add.w	r3, r7, #16
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fd82 	bl	80052e8 <dir_read>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80067ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <f_unlink+0xec>
 80067f2:	2307      	movs	r3, #7
 80067f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80067f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d102      	bne.n	8006806 <f_unlink+0xfa>
 8006800:	2300      	movs	r3, #0
 8006802:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8006806:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800680a:	2b00      	cmp	r3, #0
 800680c:	d123      	bne.n	8006856 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800680e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fe4c 	bl	80054b0 <dir_remove>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800681e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10c      	bne.n	8006840 <f_unlink+0x134>
 8006826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800682c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006830:	2200      	movs	r2, #0
 8006832:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe fa3d 	bl	8004cb4 <remove_chain>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8006840:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <f_unlink+0x14a>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4618      	mov	r0, r3
 800684c:	f7fd ffbc 	bl	80047c8 <sync_fs>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8006856:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800685a:	4618      	mov	r0, r3
 800685c:	3778      	adds	r7, #120	; 0x78
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	4613      	mov	r3, r2
 8006870:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800687a:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 800687c:	7a5b      	ldrb	r3, [r3, #9]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d131      	bne.n	80068e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006884:	4b1c      	ldr	r3, [pc, #112]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 8006886:	7a5b      	ldrb	r3, [r3, #9]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	461a      	mov	r2, r3
 800688c:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 800688e:	2100      	movs	r1, #0
 8006890:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006892:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 8006894:	7a5b      	ldrb	r3, [r3, #9]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 80068a4:	7a5b      	ldrb	r3, [r3, #9]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 80068ac:	4413      	add	r3, r2
 80068ae:	79fa      	ldrb	r2, [r7, #7]
 80068b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 80068b4:	7a5b      	ldrb	r3, [r3, #9]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	b2d1      	uxtb	r1, r2
 80068bc:	4a0e      	ldr	r2, [pc, #56]	; (80068f8 <FATFS_LinkDriverEx+0x94>)
 80068be:	7251      	strb	r1, [r2, #9]
 80068c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80068c2:	7dbb      	ldrb	r3, [r7, #22]
 80068c4:	3330      	adds	r3, #48	; 0x30
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	3301      	adds	r3, #1
 80068d0:	223a      	movs	r2, #58	; 0x3a
 80068d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	3302      	adds	r3, #2
 80068d8:	222f      	movs	r2, #47	; 0x2f
 80068da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	3303      	adds	r3, #3
 80068e0:	2200      	movs	r2, #0
 80068e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	200000b8 	.word	0x200000b8

080068fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006906:	2200      	movs	r2, #0
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff ffaa 	bl	8006864 <FATFS_LinkDriverEx>
 8006910:	4603      	mov	r3, r0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <Go_to_App>:

/************************************************************************
 *
 ***********************************************************************/
void Go_to_App(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
    uint32_t app_jump_address;

    typedef void(*pFunction)(void);		//объявляем пользовательский тип
    pFunction Jump_To_Application;		//и создаём переменную этого типа

    HAL_RCC_DeInit();
 8006922:	f7fb fa9b 	bl	8001e5c <HAL_RCC_DeInit>
    HAL_DeInit();
 8006926:	f7fa f943 	bl	8000bb0 <HAL_DeInit>

    app_jump_address = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);	//извлекаем адрес перехода из вектора Reset
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <Go_to_App+0x34>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60fb      	str	r3, [r7, #12]
    Jump_To_Application = (pFunction)app_jump_address;            	//приводим его к пользовательскому типу
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8006934:	b672      	cpsid	i
    __disable_irq();												//запрещаем прерывания
    __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);				//устанавливаем SP приложения
 8006936:	4b07      	ldr	r3, [pc, #28]	; (8006954 <Go_to_App+0x38>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f383 8808 	msr	MSP, r3
    Jump_To_Application();											//запускаем приложение
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	4798      	blx	r3
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	08008004 	.word	0x08008004
 8006954:	08008000 	.word	0x08008000

08006958 <flash_erase>:

/************************************************************************
 *
 ***********************************************************************/
void flash_erase(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800695c:	f7fa fb08 	bl	8000f70 <HAL_FLASH_Unlock>
//	HAL_FLASHEx_Erase(pEraseInit, SectorError)
//	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
	FLASH_Erase_Sector(FLASH_SECTOR_2, FLASH_VOLTAGE_RANGE_3);
 8006960:	2102      	movs	r1, #2
 8006962:	2002      	movs	r0, #2
 8006964:	f7fa fc74 	bl	8001250 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_3, FLASH_VOLTAGE_RANGE_3);
 8006968:	2102      	movs	r1, #2
 800696a:	2003      	movs	r0, #3
 800696c:	f7fa fc70 	bl	8001250 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_4, FLASH_VOLTAGE_RANGE_3);
 8006970:	2102      	movs	r1, #2
 8006972:	2004      	movs	r0, #4
 8006974:	f7fa fc6c 	bl	8001250 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_5, FLASH_VOLTAGE_RANGE_3);
 8006978:	2102      	movs	r1, #2
 800697a:	2005      	movs	r0, #5
 800697c:	f7fa fc68 	bl	8001250 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 8006980:	2102      	movs	r1, #2
 8006982:	2006      	movs	r0, #6
 8006984:	f7fa fc64 	bl	8001250 <FLASH_Erase_Sector>
	FLASH_Erase_Sector(FLASH_SECTOR_7, FLASH_VOLTAGE_RANGE_3);
 8006988:	2102      	movs	r1, #2
 800698a:	2007      	movs	r0, #7
 800698c:	f7fa fc60 	bl	8001250 <FLASH_Erase_Sector>
}
 8006990:	bf00      	nop
 8006992:	bd80      	pop	{r7, pc}

08006994 <flash_program>:

/************************************************************************
 *
 ***********************************************************************/
void flash_program(void)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800699a:	af00      	add	r7, sp, #0
	uint32_t programBytesToRead;
	uint32_t programBytesCounter;
	uint32_t currentAddress;
	UINT readBytes;

	programBytesToRead = info.fsize;	// запоминаем размер файла
 800699c:	4b40      	ldr	r3, [pc, #256]	; (8006aa0 <flash_program+0x10c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

	programBytesCounter = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	currentAddress = APPLICATION_ADDRESS;
 80069aa:	4b3e      	ldr	r3, [pc, #248]	; (8006aa4 <flash_program+0x110>)
 80069ac:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

	while ((programBytesToRead - programBytesCounter) >= 512)
 80069b0:	e02d      	b.n	8006a0e <flash_program+0x7a>
	{
		f_read(&program, readBuffer, 512, &readBytes);
 80069b2:	463b      	mov	r3, r7
 80069b4:	1d39      	adds	r1, r7, #4
 80069b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ba:	483b      	ldr	r0, [pc, #236]	; (8006aa8 <flash_program+0x114>)
 80069bc:	f7ff fc66 	bl	800628c <f_read>
		programBytesCounter += 512;
 80069c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80069c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80069c8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

		for (uint32_t i = 0; i < 512; i += 4)
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80069d2:	e017      	b.n	8006a04 <flash_program+0x70>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, currentAddress, *(uint32_t*) &readBuffer[i]);
 80069d4:	1d3a      	adds	r2, r7, #4
 80069d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80069da:	4413      	add	r3, r2
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f04f 0400 	mov.w	r4, #0
 80069e2:	461a      	mov	r2, r3
 80069e4:	4623      	mov	r3, r4
 80069e6:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 80069ea:	2002      	movs	r0, #2
 80069ec:	f7fa fa6c 	bl	8000ec8 <HAL_FLASH_Program>
			currentAddress += 4;
 80069f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80069f4:	3304      	adds	r3, #4
 80069f6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
		for (uint32_t i = 0; i < 512; i += 4)
 80069fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80069fe:	3304      	adds	r3, #4
 8006a00:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8006a04:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8006a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0c:	d3e2      	bcc.n	80069d4 <flash_program+0x40>
	while ((programBytesToRead - programBytesCounter) >= 512)
 8006a0e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8006a12:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1c:	d2c9      	bcs.n	80069b2 <flash_program+0x1e>
		}
	}

	if (programBytesToRead != programBytesCounter)
 8006a1e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8006a22:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d032      	beq.n	8006a90 <flash_program+0xfc>
	{
		f_read(&program, readBuffer, (programBytesToRead - programBytesCounter), &readBytes);
 8006a2a:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8006a2e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a32:	1ad2      	subs	r2, r2, r3
 8006a34:	463b      	mov	r3, r7
 8006a36:	1d39      	adds	r1, r7, #4
 8006a38:	481b      	ldr	r0, [pc, #108]	; (8006aa8 <flash_program+0x114>)
 8006a3a:	f7ff fc27 	bl	800628c <f_read>

		for (uint32_t i = 0; i < (programBytesToRead - programBytesCounter); i += 4)
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8006a44:	e017      	b.n	8006a76 <flash_program+0xe2>
		{
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, currentAddress, *(uint32_t*) &readBuffer[i]);
 8006a46:	1d3a      	adds	r2, r7, #4
 8006a48:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8006a4c:	4413      	add	r3, r2
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f04f 0400 	mov.w	r4, #0
 8006a54:	461a      	mov	r2, r3
 8006a56:	4623      	mov	r3, r4
 8006a58:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8006a5c:	2002      	movs	r0, #2
 8006a5e:	f7fa fa33 	bl	8000ec8 <HAL_FLASH_Program>
			currentAddress += 4;
 8006a62:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006a66:	3304      	adds	r3, #4
 8006a68:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
		for (uint32_t i = 0; i < (programBytesToRead - programBytesCounter); i += 4)
 8006a6c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8006a70:	3304      	adds	r3, #4
 8006a72:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8006a76:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8006a7a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d3de      	bcc.n	8006a46 <flash_program+0xb2>
		}
		programBytesCounter = programBytesToRead;
 8006a88:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006a8c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	HAL_FLASH_Lock();
 8006a90:	f7fa fa90 	bl	8000fb4 <HAL_FLASH_Lock>
}
 8006a94:	bf00      	nop
 8006a96:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd90      	pop	{r4, r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200021e0 	.word	0x200021e0
 8006aa4:	08008000 	.word	0x08008000
 8006aa8:	200021f8 	.word	0x200021f8

08006aac <Bootloader_Main>:

/************************************************************************
 *
 ***********************************************************************/
void Bootloader_Main(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
	FRESULT res;
	uint8_t path[12] = "program.bin";
 8006ab2:	4a28      	ldr	r2, [pc, #160]	; (8006b54 <Bootloader_Main+0xa8>)
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ab8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	path[11] = '\0';
 8006abc:	2300      	movs	r3, #0
 8006abe:	72fb      	strb	r3, [r7, #11]

	printf("Bootloader_main process\r\n");
 8006ac0:	4825      	ldr	r0, [pc, #148]	; (8006b58 <Bootloader_Main+0xac>)
 8006ac2:	f000 f901 	bl	8006cc8 <puts>

	res = f_mount(&fileSystem, SDPath, 1);	// монтирование карты памяти
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4924      	ldr	r1, [pc, #144]	; (8006b5c <Bootloader_Main+0xb0>)
 8006aca:	4825      	ldr	r0, [pc, #148]	; (8006b60 <Bootloader_Main+0xb4>)
 8006acc:	f7ff f9cc 	bl	8005e68 <f_mount>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]
	printf("f_mount is: %d", res);
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4822      	ldr	r0, [pc, #136]	; (8006b64 <Bootloader_Main+0xb8>)
 8006ada:	f000 f881 	bl	8006be0 <iprintf>
	if (res == FR_OK)
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d130      	bne.n	8006b46 <Bootloader_Main+0x9a>
	{
		res = f_open(&program, (char*) path, FA_READ);	// чтение файла
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4619      	mov	r1, r3
 8006aea:	481f      	ldr	r0, [pc, #124]	; (8006b68 <Bootloader_Main+0xbc>)
 8006aec:	f7ff fa02 	bl	8005ef4 <f_open>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
		printf("f_open is: %d", res);
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	4619      	mov	r1, r3
 8006af8:	481c      	ldr	r0, [pc, #112]	; (8006b6c <Bootloader_Main+0xc0>)
 8006afa:	f000 f871 	bl	8006be0 <iprintf>
		if (res == FR_OK)
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d120      	bne.n	8006b46 <Bootloader_Main+0x9a>
		{
			f_stat(path, &info);	// считываем длину файла
 8006b04:	463b      	mov	r3, r7
 8006b06:	491a      	ldr	r1, [pc, #104]	; (8006b70 <Bootloader_Main+0xc4>)
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fdc6 	bl	800669a <f_stat>
			flash_erase();
 8006b0e:	f7ff ff23 	bl	8006958 <flash_erase>
			flash_program();
 8006b12:	f7ff ff3f 	bl	8006994 <flash_program>

			res = f_close(&program);	// закрываем файл
 8006b16:	4814      	ldr	r0, [pc, #80]	; (8006b68 <Bootloader_Main+0xbc>)
 8006b18:	f7ff fd95 	bl	8006646 <f_close>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
			printf("f_close is: %d", res);
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	4619      	mov	r1, r3
 8006b24:	4813      	ldr	r0, [pc, #76]	; (8006b74 <Bootloader_Main+0xc8>)
 8006b26:	f000 f85b 	bl	8006be0 <iprintf>
			if (res == FR_OK)
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <Bootloader_Main+0x9a>
			{
				res = f_unlink((char*)path);	// удаляем файл
 8006b30:	463b      	mov	r3, r7
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff fdea 	bl	800670c <f_unlink>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
				printf("f_unlink is: %d", res);
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	480d      	ldr	r0, [pc, #52]	; (8006b78 <Bootloader_Main+0xcc>)
 8006b42:	f000 f84d 	bl	8006be0 <iprintf>
//			SetKey();
//			NVIC_SystemReset();
		}
	}

	Go_to_App();	// если карта памяти не найдена
 8006b46:	f7ff fee9 	bl	800691c <Go_to_App>


}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	08007b28 	.word	0x08007b28
 8006b58:	08007acc 	.word	0x08007acc
 8006b5c:	20000178 	.word	0x20000178
 8006b60:	20003228 	.word	0x20003228
 8006b64:	08007ae8 	.word	0x08007ae8
 8006b68:	200021f8 	.word	0x200021f8
 8006b6c:	08007af8 	.word	0x08007af8
 8006b70:	200021e0 	.word	0x200021e0
 8006b74:	08007b08 	.word	0x08007b08
 8006b78:	08007b18 	.word	0x08007b18

08006b7c <__errno>:
 8006b7c:	4b01      	ldr	r3, [pc, #4]	; (8006b84 <__errno+0x8>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	2000000c 	.word	0x2000000c

08006b88 <__libc_init_array>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	4e0d      	ldr	r6, [pc, #52]	; (8006bc0 <__libc_init_array+0x38>)
 8006b8c:	4c0d      	ldr	r4, [pc, #52]	; (8006bc4 <__libc_init_array+0x3c>)
 8006b8e:	1ba4      	subs	r4, r4, r6
 8006b90:	10a4      	asrs	r4, r4, #2
 8006b92:	2500      	movs	r5, #0
 8006b94:	42a5      	cmp	r5, r4
 8006b96:	d109      	bne.n	8006bac <__libc_init_array+0x24>
 8006b98:	4e0b      	ldr	r6, [pc, #44]	; (8006bc8 <__libc_init_array+0x40>)
 8006b9a:	4c0c      	ldr	r4, [pc, #48]	; (8006bcc <__libc_init_array+0x44>)
 8006b9c:	f000 ff68 	bl	8007a70 <_init>
 8006ba0:	1ba4      	subs	r4, r4, r6
 8006ba2:	10a4      	asrs	r4, r4, #2
 8006ba4:	2500      	movs	r5, #0
 8006ba6:	42a5      	cmp	r5, r4
 8006ba8:	d105      	bne.n	8006bb6 <__libc_init_array+0x2e>
 8006baa:	bd70      	pop	{r4, r5, r6, pc}
 8006bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bb0:	4798      	blx	r3
 8006bb2:	3501      	adds	r5, #1
 8006bb4:	e7ee      	b.n	8006b94 <__libc_init_array+0xc>
 8006bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bba:	4798      	blx	r3
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	e7f2      	b.n	8006ba6 <__libc_init_array+0x1e>
 8006bc0:	08007c78 	.word	0x08007c78
 8006bc4:	08007c78 	.word	0x08007c78
 8006bc8:	08007c78 	.word	0x08007c78
 8006bcc:	08007c7c 	.word	0x08007c7c

08006bd0 <memset>:
 8006bd0:	4402      	add	r2, r0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d100      	bne.n	8006bda <memset+0xa>
 8006bd8:	4770      	bx	lr
 8006bda:	f803 1b01 	strb.w	r1, [r3], #1
 8006bde:	e7f9      	b.n	8006bd4 <memset+0x4>

08006be0 <iprintf>:
 8006be0:	b40f      	push	{r0, r1, r2, r3}
 8006be2:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <iprintf+0x2c>)
 8006be4:	b513      	push	{r0, r1, r4, lr}
 8006be6:	681c      	ldr	r4, [r3, #0]
 8006be8:	b124      	cbz	r4, 8006bf4 <iprintf+0x14>
 8006bea:	69a3      	ldr	r3, [r4, #24]
 8006bec:	b913      	cbnz	r3, 8006bf4 <iprintf+0x14>
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 fa22 	bl	8007038 <__sinit>
 8006bf4:	ab05      	add	r3, sp, #20
 8006bf6:	9a04      	ldr	r2, [sp, #16]
 8006bf8:	68a1      	ldr	r1, [r4, #8]
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fbdb 	bl	80073b8 <_vfiprintf_r>
 8006c02:	b002      	add	sp, #8
 8006c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c08:	b004      	add	sp, #16
 8006c0a:	4770      	bx	lr
 8006c0c:	2000000c 	.word	0x2000000c

08006c10 <_puts_r>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	460e      	mov	r6, r1
 8006c14:	4605      	mov	r5, r0
 8006c16:	b118      	cbz	r0, 8006c20 <_puts_r+0x10>
 8006c18:	6983      	ldr	r3, [r0, #24]
 8006c1a:	b90b      	cbnz	r3, 8006c20 <_puts_r+0x10>
 8006c1c:	f000 fa0c 	bl	8007038 <__sinit>
 8006c20:	69ab      	ldr	r3, [r5, #24]
 8006c22:	68ac      	ldr	r4, [r5, #8]
 8006c24:	b913      	cbnz	r3, 8006c2c <_puts_r+0x1c>
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 fa06 	bl	8007038 <__sinit>
 8006c2c:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <_puts_r+0xac>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d117      	bne.n	8006c62 <_puts_r+0x52>
 8006c32:	686c      	ldr	r4, [r5, #4]
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	071b      	lsls	r3, r3, #28
 8006c38:	d51d      	bpl.n	8006c76 <_puts_r+0x66>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	b1db      	cbz	r3, 8006c76 <_puts_r+0x66>
 8006c3e:	3e01      	subs	r6, #1
 8006c40:	68a3      	ldr	r3, [r4, #8]
 8006c42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c46:	3b01      	subs	r3, #1
 8006c48:	60a3      	str	r3, [r4, #8]
 8006c4a:	b9e9      	cbnz	r1, 8006c88 <_puts_r+0x78>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	da2e      	bge.n	8006cae <_puts_r+0x9e>
 8006c50:	4622      	mov	r2, r4
 8006c52:	210a      	movs	r1, #10
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 f83f 	bl	8006cd8 <__swbuf_r>
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d011      	beq.n	8006c82 <_puts_r+0x72>
 8006c5e:	200a      	movs	r0, #10
 8006c60:	e011      	b.n	8006c86 <_puts_r+0x76>
 8006c62:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <_puts_r+0xb0>)
 8006c64:	429c      	cmp	r4, r3
 8006c66:	d101      	bne.n	8006c6c <_puts_r+0x5c>
 8006c68:	68ac      	ldr	r4, [r5, #8]
 8006c6a:	e7e3      	b.n	8006c34 <_puts_r+0x24>
 8006c6c:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <_puts_r+0xb4>)
 8006c6e:	429c      	cmp	r4, r3
 8006c70:	bf08      	it	eq
 8006c72:	68ec      	ldreq	r4, [r5, #12]
 8006c74:	e7de      	b.n	8006c34 <_puts_r+0x24>
 8006c76:	4621      	mov	r1, r4
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 f87f 	bl	8006d7c <__swsetup_r>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d0dd      	beq.n	8006c3e <_puts_r+0x2e>
 8006c82:	f04f 30ff 	mov.w	r0, #4294967295
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da04      	bge.n	8006c96 <_puts_r+0x86>
 8006c8c:	69a2      	ldr	r2, [r4, #24]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	dc06      	bgt.n	8006ca0 <_puts_r+0x90>
 8006c92:	290a      	cmp	r1, #10
 8006c94:	d004      	beq.n	8006ca0 <_puts_r+0x90>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	7019      	strb	r1, [r3, #0]
 8006c9e:	e7cf      	b.n	8006c40 <_puts_r+0x30>
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 f818 	bl	8006cd8 <__swbuf_r>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d1c9      	bne.n	8006c40 <_puts_r+0x30>
 8006cac:	e7e9      	b.n	8006c82 <_puts_r+0x72>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	200a      	movs	r0, #10
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	6022      	str	r2, [r4, #0]
 8006cb6:	7018      	strb	r0, [r3, #0]
 8006cb8:	e7e5      	b.n	8006c86 <_puts_r+0x76>
 8006cba:	bf00      	nop
 8006cbc:	08007bfc 	.word	0x08007bfc
 8006cc0:	08007c1c 	.word	0x08007c1c
 8006cc4:	08007bdc 	.word	0x08007bdc

08006cc8 <puts>:
 8006cc8:	4b02      	ldr	r3, [pc, #8]	; (8006cd4 <puts+0xc>)
 8006cca:	4601      	mov	r1, r0
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	f7ff bf9f 	b.w	8006c10 <_puts_r>
 8006cd2:	bf00      	nop
 8006cd4:	2000000c 	.word	0x2000000c

08006cd8 <__swbuf_r>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	460e      	mov	r6, r1
 8006cdc:	4614      	mov	r4, r2
 8006cde:	4605      	mov	r5, r0
 8006ce0:	b118      	cbz	r0, 8006cea <__swbuf_r+0x12>
 8006ce2:	6983      	ldr	r3, [r0, #24]
 8006ce4:	b90b      	cbnz	r3, 8006cea <__swbuf_r+0x12>
 8006ce6:	f000 f9a7 	bl	8007038 <__sinit>
 8006cea:	4b21      	ldr	r3, [pc, #132]	; (8006d70 <__swbuf_r+0x98>)
 8006cec:	429c      	cmp	r4, r3
 8006cee:	d12a      	bne.n	8006d46 <__swbuf_r+0x6e>
 8006cf0:	686c      	ldr	r4, [r5, #4]
 8006cf2:	69a3      	ldr	r3, [r4, #24]
 8006cf4:	60a3      	str	r3, [r4, #8]
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	071a      	lsls	r2, r3, #28
 8006cfa:	d52e      	bpl.n	8006d5a <__swbuf_r+0x82>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	b363      	cbz	r3, 8006d5a <__swbuf_r+0x82>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	6820      	ldr	r0, [r4, #0]
 8006d04:	1ac0      	subs	r0, r0, r3
 8006d06:	6963      	ldr	r3, [r4, #20]
 8006d08:	b2f6      	uxtb	r6, r6
 8006d0a:	4283      	cmp	r3, r0
 8006d0c:	4637      	mov	r7, r6
 8006d0e:	dc04      	bgt.n	8006d1a <__swbuf_r+0x42>
 8006d10:	4621      	mov	r1, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	f000 f926 	bl	8006f64 <_fflush_r>
 8006d18:	bb28      	cbnz	r0, 8006d66 <__swbuf_r+0x8e>
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	60a3      	str	r3, [r4, #8]
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	6022      	str	r2, [r4, #0]
 8006d26:	701e      	strb	r6, [r3, #0]
 8006d28:	6963      	ldr	r3, [r4, #20]
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	4283      	cmp	r3, r0
 8006d2e:	d004      	beq.n	8006d3a <__swbuf_r+0x62>
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d519      	bpl.n	8006d6a <__swbuf_r+0x92>
 8006d36:	2e0a      	cmp	r6, #10
 8006d38:	d117      	bne.n	8006d6a <__swbuf_r+0x92>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f000 f911 	bl	8006f64 <_fflush_r>
 8006d42:	b190      	cbz	r0, 8006d6a <__swbuf_r+0x92>
 8006d44:	e00f      	b.n	8006d66 <__swbuf_r+0x8e>
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <__swbuf_r+0x9c>)
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	d101      	bne.n	8006d50 <__swbuf_r+0x78>
 8006d4c:	68ac      	ldr	r4, [r5, #8]
 8006d4e:	e7d0      	b.n	8006cf2 <__swbuf_r+0x1a>
 8006d50:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <__swbuf_r+0xa0>)
 8006d52:	429c      	cmp	r4, r3
 8006d54:	bf08      	it	eq
 8006d56:	68ec      	ldreq	r4, [r5, #12]
 8006d58:	e7cb      	b.n	8006cf2 <__swbuf_r+0x1a>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 f80d 	bl	8006d7c <__swsetup_r>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d0cc      	beq.n	8006d00 <__swbuf_r+0x28>
 8006d66:	f04f 37ff 	mov.w	r7, #4294967295
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	08007bfc 	.word	0x08007bfc
 8006d74:	08007c1c 	.word	0x08007c1c
 8006d78:	08007bdc 	.word	0x08007bdc

08006d7c <__swsetup_r>:
 8006d7c:	4b32      	ldr	r3, [pc, #200]	; (8006e48 <__swsetup_r+0xcc>)
 8006d7e:	b570      	push	{r4, r5, r6, lr}
 8006d80:	681d      	ldr	r5, [r3, #0]
 8006d82:	4606      	mov	r6, r0
 8006d84:	460c      	mov	r4, r1
 8006d86:	b125      	cbz	r5, 8006d92 <__swsetup_r+0x16>
 8006d88:	69ab      	ldr	r3, [r5, #24]
 8006d8a:	b913      	cbnz	r3, 8006d92 <__swsetup_r+0x16>
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 f953 	bl	8007038 <__sinit>
 8006d92:	4b2e      	ldr	r3, [pc, #184]	; (8006e4c <__swsetup_r+0xd0>)
 8006d94:	429c      	cmp	r4, r3
 8006d96:	d10f      	bne.n	8006db8 <__swsetup_r+0x3c>
 8006d98:	686c      	ldr	r4, [r5, #4]
 8006d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	0715      	lsls	r5, r2, #28
 8006da2:	d42c      	bmi.n	8006dfe <__swsetup_r+0x82>
 8006da4:	06d0      	lsls	r0, r2, #27
 8006da6:	d411      	bmi.n	8006dcc <__swsetup_r+0x50>
 8006da8:	2209      	movs	r2, #9
 8006daa:	6032      	str	r2, [r6, #0]
 8006dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	e03e      	b.n	8006e36 <__swsetup_r+0xba>
 8006db8:	4b25      	ldr	r3, [pc, #148]	; (8006e50 <__swsetup_r+0xd4>)
 8006dba:	429c      	cmp	r4, r3
 8006dbc:	d101      	bne.n	8006dc2 <__swsetup_r+0x46>
 8006dbe:	68ac      	ldr	r4, [r5, #8]
 8006dc0:	e7eb      	b.n	8006d9a <__swsetup_r+0x1e>
 8006dc2:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <__swsetup_r+0xd8>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	bf08      	it	eq
 8006dc8:	68ec      	ldreq	r4, [r5, #12]
 8006dca:	e7e6      	b.n	8006d9a <__swsetup_r+0x1e>
 8006dcc:	0751      	lsls	r1, r2, #29
 8006dce:	d512      	bpl.n	8006df6 <__swsetup_r+0x7a>
 8006dd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd2:	b141      	cbz	r1, 8006de6 <__swsetup_r+0x6a>
 8006dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	d002      	beq.n	8006de2 <__swsetup_r+0x66>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f000 fa19 	bl	8007214 <_free_r>
 8006de2:	2300      	movs	r3, #0
 8006de4:	6363      	str	r3, [r4, #52]	; 0x34
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	2300      	movs	r3, #0
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f043 0308 	orr.w	r3, r3, #8
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	b94b      	cbnz	r3, 8006e16 <__swsetup_r+0x9a>
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e0c:	d003      	beq.n	8006e16 <__swsetup_r+0x9a>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 f9bf 	bl	8007194 <__smakebuf_r>
 8006e16:	89a2      	ldrh	r2, [r4, #12]
 8006e18:	f012 0301 	ands.w	r3, r2, #1
 8006e1c:	d00c      	beq.n	8006e38 <__swsetup_r+0xbc>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60a3      	str	r3, [r4, #8]
 8006e22:	6963      	ldr	r3, [r4, #20]
 8006e24:	425b      	negs	r3, r3
 8006e26:	61a3      	str	r3, [r4, #24]
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	b953      	cbnz	r3, 8006e42 <__swsetup_r+0xc6>
 8006e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006e34:	d1ba      	bne.n	8006dac <__swsetup_r+0x30>
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	0792      	lsls	r2, r2, #30
 8006e3a:	bf58      	it	pl
 8006e3c:	6963      	ldrpl	r3, [r4, #20]
 8006e3e:	60a3      	str	r3, [r4, #8]
 8006e40:	e7f2      	b.n	8006e28 <__swsetup_r+0xac>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e7f7      	b.n	8006e36 <__swsetup_r+0xba>
 8006e46:	bf00      	nop
 8006e48:	2000000c 	.word	0x2000000c
 8006e4c:	08007bfc 	.word	0x08007bfc
 8006e50:	08007c1c 	.word	0x08007c1c
 8006e54:	08007bdc 	.word	0x08007bdc

08006e58 <__sflush_r>:
 8006e58:	898a      	ldrh	r2, [r1, #12]
 8006e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5e:	4605      	mov	r5, r0
 8006e60:	0710      	lsls	r0, r2, #28
 8006e62:	460c      	mov	r4, r1
 8006e64:	d458      	bmi.n	8006f18 <__sflush_r+0xc0>
 8006e66:	684b      	ldr	r3, [r1, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dc05      	bgt.n	8006e78 <__sflush_r+0x20>
 8006e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dc02      	bgt.n	8006e78 <__sflush_r+0x20>
 8006e72:	2000      	movs	r0, #0
 8006e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	d0f9      	beq.n	8006e72 <__sflush_r+0x1a>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e84:	682f      	ldr	r7, [r5, #0]
 8006e86:	6a21      	ldr	r1, [r4, #32]
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	d032      	beq.n	8006ef2 <__sflush_r+0x9a>
 8006e8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	075a      	lsls	r2, r3, #29
 8006e92:	d505      	bpl.n	8006ea0 <__sflush_r+0x48>
 8006e94:	6863      	ldr	r3, [r4, #4]
 8006e96:	1ac0      	subs	r0, r0, r3
 8006e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e9a:	b10b      	cbz	r3, 8006ea0 <__sflush_r+0x48>
 8006e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e9e:	1ac0      	subs	r0, r0, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ea6:	6a21      	ldr	r1, [r4, #32]
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b0      	blx	r6
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	d106      	bne.n	8006ec0 <__sflush_r+0x68>
 8006eb2:	6829      	ldr	r1, [r5, #0]
 8006eb4:	291d      	cmp	r1, #29
 8006eb6:	d848      	bhi.n	8006f4a <__sflush_r+0xf2>
 8006eb8:	4a29      	ldr	r2, [pc, #164]	; (8006f60 <__sflush_r+0x108>)
 8006eba:	40ca      	lsrs	r2, r1
 8006ebc:	07d6      	lsls	r6, r2, #31
 8006ebe:	d544      	bpl.n	8006f4a <__sflush_r+0xf2>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	6062      	str	r2, [r4, #4]
 8006ec4:	04d9      	lsls	r1, r3, #19
 8006ec6:	6922      	ldr	r2, [r4, #16]
 8006ec8:	6022      	str	r2, [r4, #0]
 8006eca:	d504      	bpl.n	8006ed6 <__sflush_r+0x7e>
 8006ecc:	1c42      	adds	r2, r0, #1
 8006ece:	d101      	bne.n	8006ed4 <__sflush_r+0x7c>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b903      	cbnz	r3, 8006ed6 <__sflush_r+0x7e>
 8006ed4:	6560      	str	r0, [r4, #84]	; 0x54
 8006ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ed8:	602f      	str	r7, [r5, #0]
 8006eda:	2900      	cmp	r1, #0
 8006edc:	d0c9      	beq.n	8006e72 <__sflush_r+0x1a>
 8006ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ee2:	4299      	cmp	r1, r3
 8006ee4:	d002      	beq.n	8006eec <__sflush_r+0x94>
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f994 	bl	8007214 <_free_r>
 8006eec:	2000      	movs	r0, #0
 8006eee:	6360      	str	r0, [r4, #52]	; 0x34
 8006ef0:	e7c0      	b.n	8006e74 <__sflush_r+0x1c>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b0      	blx	r6
 8006ef8:	1c41      	adds	r1, r0, #1
 8006efa:	d1c8      	bne.n	8006e8e <__sflush_r+0x36>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0c5      	beq.n	8006e8e <__sflush_r+0x36>
 8006f02:	2b1d      	cmp	r3, #29
 8006f04:	d001      	beq.n	8006f0a <__sflush_r+0xb2>
 8006f06:	2b16      	cmp	r3, #22
 8006f08:	d101      	bne.n	8006f0e <__sflush_r+0xb6>
 8006f0a:	602f      	str	r7, [r5, #0]
 8006f0c:	e7b1      	b.n	8006e72 <__sflush_r+0x1a>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f14:	81a3      	strh	r3, [r4, #12]
 8006f16:	e7ad      	b.n	8006e74 <__sflush_r+0x1c>
 8006f18:	690f      	ldr	r7, [r1, #16]
 8006f1a:	2f00      	cmp	r7, #0
 8006f1c:	d0a9      	beq.n	8006e72 <__sflush_r+0x1a>
 8006f1e:	0793      	lsls	r3, r2, #30
 8006f20:	680e      	ldr	r6, [r1, #0]
 8006f22:	bf08      	it	eq
 8006f24:	694b      	ldreq	r3, [r1, #20]
 8006f26:	600f      	str	r7, [r1, #0]
 8006f28:	bf18      	it	ne
 8006f2a:	2300      	movne	r3, #0
 8006f2c:	eba6 0807 	sub.w	r8, r6, r7
 8006f30:	608b      	str	r3, [r1, #8]
 8006f32:	f1b8 0f00 	cmp.w	r8, #0
 8006f36:	dd9c      	ble.n	8006e72 <__sflush_r+0x1a>
 8006f38:	4643      	mov	r3, r8
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	6a21      	ldr	r1, [r4, #32]
 8006f3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b0      	blx	r6
 8006f44:	2800      	cmp	r0, #0
 8006f46:	dc06      	bgt.n	8006f56 <__sflush_r+0xfe>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	e78e      	b.n	8006e74 <__sflush_r+0x1c>
 8006f56:	4407      	add	r7, r0
 8006f58:	eba8 0800 	sub.w	r8, r8, r0
 8006f5c:	e7e9      	b.n	8006f32 <__sflush_r+0xda>
 8006f5e:	bf00      	nop
 8006f60:	20400001 	.word	0x20400001

08006f64 <_fflush_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	690b      	ldr	r3, [r1, #16]
 8006f68:	4605      	mov	r5, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b1db      	cbz	r3, 8006fa6 <_fflush_r+0x42>
 8006f6e:	b118      	cbz	r0, 8006f78 <_fflush_r+0x14>
 8006f70:	6983      	ldr	r3, [r0, #24]
 8006f72:	b90b      	cbnz	r3, 8006f78 <_fflush_r+0x14>
 8006f74:	f000 f860 	bl	8007038 <__sinit>
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <_fflush_r+0x48>)
 8006f7a:	429c      	cmp	r4, r3
 8006f7c:	d109      	bne.n	8006f92 <_fflush_r+0x2e>
 8006f7e:	686c      	ldr	r4, [r5, #4]
 8006f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f84:	b17b      	cbz	r3, 8006fa6 <_fflush_r+0x42>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f8e:	f7ff bf63 	b.w	8006e58 <__sflush_r>
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <_fflush_r+0x4c>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	d101      	bne.n	8006f9c <_fflush_r+0x38>
 8006f98:	68ac      	ldr	r4, [r5, #8]
 8006f9a:	e7f1      	b.n	8006f80 <_fflush_r+0x1c>
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <_fflush_r+0x50>)
 8006f9e:	429c      	cmp	r4, r3
 8006fa0:	bf08      	it	eq
 8006fa2:	68ec      	ldreq	r4, [r5, #12]
 8006fa4:	e7ec      	b.n	8006f80 <_fflush_r+0x1c>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	bf00      	nop
 8006fac:	08007bfc 	.word	0x08007bfc
 8006fb0:	08007c1c 	.word	0x08007c1c
 8006fb4:	08007bdc 	.word	0x08007bdc

08006fb8 <std>:
 8006fb8:	2300      	movs	r3, #0
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006fc2:	6083      	str	r3, [r0, #8]
 8006fc4:	8181      	strh	r1, [r0, #12]
 8006fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8006fc8:	81c2      	strh	r2, [r0, #14]
 8006fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fce:	6183      	str	r3, [r0, #24]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	305c      	adds	r0, #92	; 0x5c
 8006fd6:	f7ff fdfb 	bl	8006bd0 <memset>
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <std+0x38>)
 8006fdc:	6263      	str	r3, [r4, #36]	; 0x24
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <std+0x3c>)
 8006fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fe2:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <std+0x40>)
 8006fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <std+0x44>)
 8006fe8:	6224      	str	r4, [r4, #32]
 8006fea:	6323      	str	r3, [r4, #48]	; 0x30
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	bf00      	nop
 8006ff0:	08007915 	.word	0x08007915
 8006ff4:	08007937 	.word	0x08007937
 8006ff8:	0800796f 	.word	0x0800796f
 8006ffc:	08007993 	.word	0x08007993

08007000 <_cleanup_r>:
 8007000:	4901      	ldr	r1, [pc, #4]	; (8007008 <_cleanup_r+0x8>)
 8007002:	f000 b885 	b.w	8007110 <_fwalk_reent>
 8007006:	bf00      	nop
 8007008:	08006f65 	.word	0x08006f65

0800700c <__sfmoreglue>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	1e4a      	subs	r2, r1, #1
 8007010:	2568      	movs	r5, #104	; 0x68
 8007012:	4355      	muls	r5, r2
 8007014:	460e      	mov	r6, r1
 8007016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800701a:	f000 f949 	bl	80072b0 <_malloc_r>
 800701e:	4604      	mov	r4, r0
 8007020:	b140      	cbz	r0, 8007034 <__sfmoreglue+0x28>
 8007022:	2100      	movs	r1, #0
 8007024:	e9c0 1600 	strd	r1, r6, [r0]
 8007028:	300c      	adds	r0, #12
 800702a:	60a0      	str	r0, [r4, #8]
 800702c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007030:	f7ff fdce 	bl	8006bd0 <memset>
 8007034:	4620      	mov	r0, r4
 8007036:	bd70      	pop	{r4, r5, r6, pc}

08007038 <__sinit>:
 8007038:	6983      	ldr	r3, [r0, #24]
 800703a:	b510      	push	{r4, lr}
 800703c:	4604      	mov	r4, r0
 800703e:	bb33      	cbnz	r3, 800708e <__sinit+0x56>
 8007040:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007044:	6503      	str	r3, [r0, #80]	; 0x50
 8007046:	4b12      	ldr	r3, [pc, #72]	; (8007090 <__sinit+0x58>)
 8007048:	4a12      	ldr	r2, [pc, #72]	; (8007094 <__sinit+0x5c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6282      	str	r2, [r0, #40]	; 0x28
 800704e:	4298      	cmp	r0, r3
 8007050:	bf04      	itt	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	6183      	streq	r3, [r0, #24]
 8007056:	f000 f81f 	bl	8007098 <__sfp>
 800705a:	6060      	str	r0, [r4, #4]
 800705c:	4620      	mov	r0, r4
 800705e:	f000 f81b 	bl	8007098 <__sfp>
 8007062:	60a0      	str	r0, [r4, #8]
 8007064:	4620      	mov	r0, r4
 8007066:	f000 f817 	bl	8007098 <__sfp>
 800706a:	2200      	movs	r2, #0
 800706c:	60e0      	str	r0, [r4, #12]
 800706e:	2104      	movs	r1, #4
 8007070:	6860      	ldr	r0, [r4, #4]
 8007072:	f7ff ffa1 	bl	8006fb8 <std>
 8007076:	2201      	movs	r2, #1
 8007078:	2109      	movs	r1, #9
 800707a:	68a0      	ldr	r0, [r4, #8]
 800707c:	f7ff ff9c 	bl	8006fb8 <std>
 8007080:	2202      	movs	r2, #2
 8007082:	2112      	movs	r1, #18
 8007084:	68e0      	ldr	r0, [r4, #12]
 8007086:	f7ff ff97 	bl	8006fb8 <std>
 800708a:	2301      	movs	r3, #1
 800708c:	61a3      	str	r3, [r4, #24]
 800708e:	bd10      	pop	{r4, pc}
 8007090:	08007bd8 	.word	0x08007bd8
 8007094:	08007001 	.word	0x08007001

08007098 <__sfp>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	4b1b      	ldr	r3, [pc, #108]	; (8007108 <__sfp+0x70>)
 800709c:	681e      	ldr	r6, [r3, #0]
 800709e:	69b3      	ldr	r3, [r6, #24]
 80070a0:	4607      	mov	r7, r0
 80070a2:	b913      	cbnz	r3, 80070aa <__sfp+0x12>
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff ffc7 	bl	8007038 <__sinit>
 80070aa:	3648      	adds	r6, #72	; 0x48
 80070ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	d503      	bpl.n	80070bc <__sfp+0x24>
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	b133      	cbz	r3, 80070c6 <__sfp+0x2e>
 80070b8:	6836      	ldr	r6, [r6, #0]
 80070ba:	e7f7      	b.n	80070ac <__sfp+0x14>
 80070bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070c0:	b16d      	cbz	r5, 80070de <__sfp+0x46>
 80070c2:	3468      	adds	r4, #104	; 0x68
 80070c4:	e7f4      	b.n	80070b0 <__sfp+0x18>
 80070c6:	2104      	movs	r1, #4
 80070c8:	4638      	mov	r0, r7
 80070ca:	f7ff ff9f 	bl	800700c <__sfmoreglue>
 80070ce:	6030      	str	r0, [r6, #0]
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d1f1      	bne.n	80070b8 <__sfp+0x20>
 80070d4:	230c      	movs	r3, #12
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4604      	mov	r4, r0
 80070da:	4620      	mov	r0, r4
 80070dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <__sfp+0x74>)
 80070e0:	6665      	str	r5, [r4, #100]	; 0x64
 80070e2:	e9c4 5500 	strd	r5, r5, [r4]
 80070e6:	60a5      	str	r5, [r4, #8]
 80070e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80070ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80070f0:	2208      	movs	r2, #8
 80070f2:	4629      	mov	r1, r5
 80070f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070f8:	f7ff fd6a 	bl	8006bd0 <memset>
 80070fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007104:	e7e9      	b.n	80070da <__sfp+0x42>
 8007106:	bf00      	nop
 8007108:	08007bd8 	.word	0x08007bd8
 800710c:	ffff0001 	.word	0xffff0001

08007110 <_fwalk_reent>:
 8007110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007114:	4680      	mov	r8, r0
 8007116:	4689      	mov	r9, r1
 8007118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800711c:	2600      	movs	r6, #0
 800711e:	b914      	cbnz	r4, 8007126 <_fwalk_reent+0x16>
 8007120:	4630      	mov	r0, r6
 8007122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007126:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800712a:	3f01      	subs	r7, #1
 800712c:	d501      	bpl.n	8007132 <_fwalk_reent+0x22>
 800712e:	6824      	ldr	r4, [r4, #0]
 8007130:	e7f5      	b.n	800711e <_fwalk_reent+0xe>
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d907      	bls.n	8007148 <_fwalk_reent+0x38>
 8007138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800713c:	3301      	adds	r3, #1
 800713e:	d003      	beq.n	8007148 <_fwalk_reent+0x38>
 8007140:	4629      	mov	r1, r5
 8007142:	4640      	mov	r0, r8
 8007144:	47c8      	blx	r9
 8007146:	4306      	orrs	r6, r0
 8007148:	3568      	adds	r5, #104	; 0x68
 800714a:	e7ee      	b.n	800712a <_fwalk_reent+0x1a>

0800714c <__swhatbuf_r>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	460e      	mov	r6, r1
 8007150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007154:	2900      	cmp	r1, #0
 8007156:	b096      	sub	sp, #88	; 0x58
 8007158:	4614      	mov	r4, r2
 800715a:	461d      	mov	r5, r3
 800715c:	da07      	bge.n	800716e <__swhatbuf_r+0x22>
 800715e:	2300      	movs	r3, #0
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	89b3      	ldrh	r3, [r6, #12]
 8007164:	061a      	lsls	r2, r3, #24
 8007166:	d410      	bmi.n	800718a <__swhatbuf_r+0x3e>
 8007168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800716c:	e00e      	b.n	800718c <__swhatbuf_r+0x40>
 800716e:	466a      	mov	r2, sp
 8007170:	f000 fc36 	bl	80079e0 <_fstat_r>
 8007174:	2800      	cmp	r0, #0
 8007176:	dbf2      	blt.n	800715e <__swhatbuf_r+0x12>
 8007178:	9a01      	ldr	r2, [sp, #4]
 800717a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800717e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007182:	425a      	negs	r2, r3
 8007184:	415a      	adcs	r2, r3
 8007186:	602a      	str	r2, [r5, #0]
 8007188:	e7ee      	b.n	8007168 <__swhatbuf_r+0x1c>
 800718a:	2340      	movs	r3, #64	; 0x40
 800718c:	2000      	movs	r0, #0
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	b016      	add	sp, #88	; 0x58
 8007192:	bd70      	pop	{r4, r5, r6, pc}

08007194 <__smakebuf_r>:
 8007194:	898b      	ldrh	r3, [r1, #12]
 8007196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007198:	079d      	lsls	r5, r3, #30
 800719a:	4606      	mov	r6, r0
 800719c:	460c      	mov	r4, r1
 800719e:	d507      	bpl.n	80071b0 <__smakebuf_r+0x1c>
 80071a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	2301      	movs	r3, #1
 80071aa:	6163      	str	r3, [r4, #20]
 80071ac:	b002      	add	sp, #8
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	ab01      	add	r3, sp, #4
 80071b2:	466a      	mov	r2, sp
 80071b4:	f7ff ffca 	bl	800714c <__swhatbuf_r>
 80071b8:	9900      	ldr	r1, [sp, #0]
 80071ba:	4605      	mov	r5, r0
 80071bc:	4630      	mov	r0, r6
 80071be:	f000 f877 	bl	80072b0 <_malloc_r>
 80071c2:	b948      	cbnz	r0, 80071d8 <__smakebuf_r+0x44>
 80071c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c8:	059a      	lsls	r2, r3, #22
 80071ca:	d4ef      	bmi.n	80071ac <__smakebuf_r+0x18>
 80071cc:	f023 0303 	bic.w	r3, r3, #3
 80071d0:	f043 0302 	orr.w	r3, r3, #2
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	e7e3      	b.n	80071a0 <__smakebuf_r+0xc>
 80071d8:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <__smakebuf_r+0x7c>)
 80071da:	62b3      	str	r3, [r6, #40]	; 0x28
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	6020      	str	r0, [r4, #0]
 80071e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	9b00      	ldr	r3, [sp, #0]
 80071e8:	6163      	str	r3, [r4, #20]
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	6120      	str	r0, [r4, #16]
 80071ee:	b15b      	cbz	r3, 8007208 <__smakebuf_r+0x74>
 80071f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071f4:	4630      	mov	r0, r6
 80071f6:	f000 fc05 	bl	8007a04 <_isatty_r>
 80071fa:	b128      	cbz	r0, 8007208 <__smakebuf_r+0x74>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	f023 0303 	bic.w	r3, r3, #3
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	81a3      	strh	r3, [r4, #12]
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	431d      	orrs	r5, r3
 800720c:	81a5      	strh	r5, [r4, #12]
 800720e:	e7cd      	b.n	80071ac <__smakebuf_r+0x18>
 8007210:	08007001 	.word	0x08007001

08007214 <_free_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4605      	mov	r5, r0
 8007218:	2900      	cmp	r1, #0
 800721a:	d045      	beq.n	80072a8 <_free_r+0x94>
 800721c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007220:	1f0c      	subs	r4, r1, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	bfb8      	it	lt
 8007226:	18e4      	addlt	r4, r4, r3
 8007228:	f000 fc0e 	bl	8007a48 <__malloc_lock>
 800722c:	4a1f      	ldr	r2, [pc, #124]	; (80072ac <_free_r+0x98>)
 800722e:	6813      	ldr	r3, [r2, #0]
 8007230:	4610      	mov	r0, r2
 8007232:	b933      	cbnz	r3, 8007242 <_free_r+0x2e>
 8007234:	6063      	str	r3, [r4, #4]
 8007236:	6014      	str	r4, [r2, #0]
 8007238:	4628      	mov	r0, r5
 800723a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800723e:	f000 bc04 	b.w	8007a4a <__malloc_unlock>
 8007242:	42a3      	cmp	r3, r4
 8007244:	d90c      	bls.n	8007260 <_free_r+0x4c>
 8007246:	6821      	ldr	r1, [r4, #0]
 8007248:	1862      	adds	r2, r4, r1
 800724a:	4293      	cmp	r3, r2
 800724c:	bf04      	itt	eq
 800724e:	681a      	ldreq	r2, [r3, #0]
 8007250:	685b      	ldreq	r3, [r3, #4]
 8007252:	6063      	str	r3, [r4, #4]
 8007254:	bf04      	itt	eq
 8007256:	1852      	addeq	r2, r2, r1
 8007258:	6022      	streq	r2, [r4, #0]
 800725a:	6004      	str	r4, [r0, #0]
 800725c:	e7ec      	b.n	8007238 <_free_r+0x24>
 800725e:	4613      	mov	r3, r2
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	b10a      	cbz	r2, 8007268 <_free_r+0x54>
 8007264:	42a2      	cmp	r2, r4
 8007266:	d9fa      	bls.n	800725e <_free_r+0x4a>
 8007268:	6819      	ldr	r1, [r3, #0]
 800726a:	1858      	adds	r0, r3, r1
 800726c:	42a0      	cmp	r0, r4
 800726e:	d10b      	bne.n	8007288 <_free_r+0x74>
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	4401      	add	r1, r0
 8007274:	1858      	adds	r0, r3, r1
 8007276:	4282      	cmp	r2, r0
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	d1dd      	bne.n	8007238 <_free_r+0x24>
 800727c:	6810      	ldr	r0, [r2, #0]
 800727e:	6852      	ldr	r2, [r2, #4]
 8007280:	605a      	str	r2, [r3, #4]
 8007282:	4401      	add	r1, r0
 8007284:	6019      	str	r1, [r3, #0]
 8007286:	e7d7      	b.n	8007238 <_free_r+0x24>
 8007288:	d902      	bls.n	8007290 <_free_r+0x7c>
 800728a:	230c      	movs	r3, #12
 800728c:	602b      	str	r3, [r5, #0]
 800728e:	e7d3      	b.n	8007238 <_free_r+0x24>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	1821      	adds	r1, r4, r0
 8007294:	428a      	cmp	r2, r1
 8007296:	bf04      	itt	eq
 8007298:	6811      	ldreq	r1, [r2, #0]
 800729a:	6852      	ldreq	r2, [r2, #4]
 800729c:	6062      	str	r2, [r4, #4]
 800729e:	bf04      	itt	eq
 80072a0:	1809      	addeq	r1, r1, r0
 80072a2:	6021      	streq	r1, [r4, #0]
 80072a4:	605c      	str	r4, [r3, #4]
 80072a6:	e7c7      	b.n	8007238 <_free_r+0x24>
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	bf00      	nop
 80072ac:	200000c4 	.word	0x200000c4

080072b0 <_malloc_r>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	1ccd      	adds	r5, r1, #3
 80072b4:	f025 0503 	bic.w	r5, r5, #3
 80072b8:	3508      	adds	r5, #8
 80072ba:	2d0c      	cmp	r5, #12
 80072bc:	bf38      	it	cc
 80072be:	250c      	movcc	r5, #12
 80072c0:	2d00      	cmp	r5, #0
 80072c2:	4606      	mov	r6, r0
 80072c4:	db01      	blt.n	80072ca <_malloc_r+0x1a>
 80072c6:	42a9      	cmp	r1, r5
 80072c8:	d903      	bls.n	80072d2 <_malloc_r+0x22>
 80072ca:	230c      	movs	r3, #12
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	2000      	movs	r0, #0
 80072d0:	bd70      	pop	{r4, r5, r6, pc}
 80072d2:	f000 fbb9 	bl	8007a48 <__malloc_lock>
 80072d6:	4a21      	ldr	r2, [pc, #132]	; (800735c <_malloc_r+0xac>)
 80072d8:	6814      	ldr	r4, [r2, #0]
 80072da:	4621      	mov	r1, r4
 80072dc:	b991      	cbnz	r1, 8007304 <_malloc_r+0x54>
 80072de:	4c20      	ldr	r4, [pc, #128]	; (8007360 <_malloc_r+0xb0>)
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	b91b      	cbnz	r3, 80072ec <_malloc_r+0x3c>
 80072e4:	4630      	mov	r0, r6
 80072e6:	f000 fb05 	bl	80078f4 <_sbrk_r>
 80072ea:	6020      	str	r0, [r4, #0]
 80072ec:	4629      	mov	r1, r5
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 fb00 	bl	80078f4 <_sbrk_r>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d124      	bne.n	8007342 <_malloc_r+0x92>
 80072f8:	230c      	movs	r3, #12
 80072fa:	6033      	str	r3, [r6, #0]
 80072fc:	4630      	mov	r0, r6
 80072fe:	f000 fba4 	bl	8007a4a <__malloc_unlock>
 8007302:	e7e4      	b.n	80072ce <_malloc_r+0x1e>
 8007304:	680b      	ldr	r3, [r1, #0]
 8007306:	1b5b      	subs	r3, r3, r5
 8007308:	d418      	bmi.n	800733c <_malloc_r+0x8c>
 800730a:	2b0b      	cmp	r3, #11
 800730c:	d90f      	bls.n	800732e <_malloc_r+0x7e>
 800730e:	600b      	str	r3, [r1, #0]
 8007310:	50cd      	str	r5, [r1, r3]
 8007312:	18cc      	adds	r4, r1, r3
 8007314:	4630      	mov	r0, r6
 8007316:	f000 fb98 	bl	8007a4a <__malloc_unlock>
 800731a:	f104 000b 	add.w	r0, r4, #11
 800731e:	1d23      	adds	r3, r4, #4
 8007320:	f020 0007 	bic.w	r0, r0, #7
 8007324:	1ac3      	subs	r3, r0, r3
 8007326:	d0d3      	beq.n	80072d0 <_malloc_r+0x20>
 8007328:	425a      	negs	r2, r3
 800732a:	50e2      	str	r2, [r4, r3]
 800732c:	e7d0      	b.n	80072d0 <_malloc_r+0x20>
 800732e:	428c      	cmp	r4, r1
 8007330:	684b      	ldr	r3, [r1, #4]
 8007332:	bf16      	itet	ne
 8007334:	6063      	strne	r3, [r4, #4]
 8007336:	6013      	streq	r3, [r2, #0]
 8007338:	460c      	movne	r4, r1
 800733a:	e7eb      	b.n	8007314 <_malloc_r+0x64>
 800733c:	460c      	mov	r4, r1
 800733e:	6849      	ldr	r1, [r1, #4]
 8007340:	e7cc      	b.n	80072dc <_malloc_r+0x2c>
 8007342:	1cc4      	adds	r4, r0, #3
 8007344:	f024 0403 	bic.w	r4, r4, #3
 8007348:	42a0      	cmp	r0, r4
 800734a:	d005      	beq.n	8007358 <_malloc_r+0xa8>
 800734c:	1a21      	subs	r1, r4, r0
 800734e:	4630      	mov	r0, r6
 8007350:	f000 fad0 	bl	80078f4 <_sbrk_r>
 8007354:	3001      	adds	r0, #1
 8007356:	d0cf      	beq.n	80072f8 <_malloc_r+0x48>
 8007358:	6025      	str	r5, [r4, #0]
 800735a:	e7db      	b.n	8007314 <_malloc_r+0x64>
 800735c:	200000c4 	.word	0x200000c4
 8007360:	200000c8 	.word	0x200000c8

08007364 <__sfputc_r>:
 8007364:	6893      	ldr	r3, [r2, #8]
 8007366:	3b01      	subs	r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	b410      	push	{r4}
 800736c:	6093      	str	r3, [r2, #8]
 800736e:	da08      	bge.n	8007382 <__sfputc_r+0x1e>
 8007370:	6994      	ldr	r4, [r2, #24]
 8007372:	42a3      	cmp	r3, r4
 8007374:	db01      	blt.n	800737a <__sfputc_r+0x16>
 8007376:	290a      	cmp	r1, #10
 8007378:	d103      	bne.n	8007382 <__sfputc_r+0x1e>
 800737a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800737e:	f7ff bcab 	b.w	8006cd8 <__swbuf_r>
 8007382:	6813      	ldr	r3, [r2, #0]
 8007384:	1c58      	adds	r0, r3, #1
 8007386:	6010      	str	r0, [r2, #0]
 8007388:	7019      	strb	r1, [r3, #0]
 800738a:	4608      	mov	r0, r1
 800738c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007390:	4770      	bx	lr

08007392 <__sfputs_r>:
 8007392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007394:	4606      	mov	r6, r0
 8007396:	460f      	mov	r7, r1
 8007398:	4614      	mov	r4, r2
 800739a:	18d5      	adds	r5, r2, r3
 800739c:	42ac      	cmp	r4, r5
 800739e:	d101      	bne.n	80073a4 <__sfputs_r+0x12>
 80073a0:	2000      	movs	r0, #0
 80073a2:	e007      	b.n	80073b4 <__sfputs_r+0x22>
 80073a4:	463a      	mov	r2, r7
 80073a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073aa:	4630      	mov	r0, r6
 80073ac:	f7ff ffda 	bl	8007364 <__sfputc_r>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d1f3      	bne.n	800739c <__sfputs_r+0xa>
 80073b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073b8 <_vfiprintf_r>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	460c      	mov	r4, r1
 80073be:	b09d      	sub	sp, #116	; 0x74
 80073c0:	4617      	mov	r7, r2
 80073c2:	461d      	mov	r5, r3
 80073c4:	4606      	mov	r6, r0
 80073c6:	b118      	cbz	r0, 80073d0 <_vfiprintf_r+0x18>
 80073c8:	6983      	ldr	r3, [r0, #24]
 80073ca:	b90b      	cbnz	r3, 80073d0 <_vfiprintf_r+0x18>
 80073cc:	f7ff fe34 	bl	8007038 <__sinit>
 80073d0:	4b7c      	ldr	r3, [pc, #496]	; (80075c4 <_vfiprintf_r+0x20c>)
 80073d2:	429c      	cmp	r4, r3
 80073d4:	d158      	bne.n	8007488 <_vfiprintf_r+0xd0>
 80073d6:	6874      	ldr	r4, [r6, #4]
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	0718      	lsls	r0, r3, #28
 80073dc:	d55e      	bpl.n	800749c <_vfiprintf_r+0xe4>
 80073de:	6923      	ldr	r3, [r4, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d05b      	beq.n	800749c <_vfiprintf_r+0xe4>
 80073e4:	2300      	movs	r3, #0
 80073e6:	9309      	str	r3, [sp, #36]	; 0x24
 80073e8:	2320      	movs	r3, #32
 80073ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073ee:	2330      	movs	r3, #48	; 0x30
 80073f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073f4:	9503      	str	r5, [sp, #12]
 80073f6:	f04f 0b01 	mov.w	fp, #1
 80073fa:	46b8      	mov	r8, r7
 80073fc:	4645      	mov	r5, r8
 80073fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007402:	b10b      	cbz	r3, 8007408 <_vfiprintf_r+0x50>
 8007404:	2b25      	cmp	r3, #37	; 0x25
 8007406:	d154      	bne.n	80074b2 <_vfiprintf_r+0xfa>
 8007408:	ebb8 0a07 	subs.w	sl, r8, r7
 800740c:	d00b      	beq.n	8007426 <_vfiprintf_r+0x6e>
 800740e:	4653      	mov	r3, sl
 8007410:	463a      	mov	r2, r7
 8007412:	4621      	mov	r1, r4
 8007414:	4630      	mov	r0, r6
 8007416:	f7ff ffbc 	bl	8007392 <__sfputs_r>
 800741a:	3001      	adds	r0, #1
 800741c:	f000 80c2 	beq.w	80075a4 <_vfiprintf_r+0x1ec>
 8007420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007422:	4453      	add	r3, sl
 8007424:	9309      	str	r3, [sp, #36]	; 0x24
 8007426:	f898 3000 	ldrb.w	r3, [r8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 80ba 	beq.w	80075a4 <_vfiprintf_r+0x1ec>
 8007430:	2300      	movs	r3, #0
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007442:	931a      	str	r3, [sp, #104]	; 0x68
 8007444:	46a8      	mov	r8, r5
 8007446:	2205      	movs	r2, #5
 8007448:	f818 1b01 	ldrb.w	r1, [r8], #1
 800744c:	485e      	ldr	r0, [pc, #376]	; (80075c8 <_vfiprintf_r+0x210>)
 800744e:	f7f8 fec7 	bl	80001e0 <memchr>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	bb78      	cbnz	r0, 80074b6 <_vfiprintf_r+0xfe>
 8007456:	06d9      	lsls	r1, r3, #27
 8007458:	bf44      	itt	mi
 800745a:	2220      	movmi	r2, #32
 800745c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007460:	071a      	lsls	r2, r3, #28
 8007462:	bf44      	itt	mi
 8007464:	222b      	movmi	r2, #43	; 0x2b
 8007466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800746a:	782a      	ldrb	r2, [r5, #0]
 800746c:	2a2a      	cmp	r2, #42	; 0x2a
 800746e:	d02a      	beq.n	80074c6 <_vfiprintf_r+0x10e>
 8007470:	9a07      	ldr	r2, [sp, #28]
 8007472:	46a8      	mov	r8, r5
 8007474:	2000      	movs	r0, #0
 8007476:	250a      	movs	r5, #10
 8007478:	4641      	mov	r1, r8
 800747a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800747e:	3b30      	subs	r3, #48	; 0x30
 8007480:	2b09      	cmp	r3, #9
 8007482:	d969      	bls.n	8007558 <_vfiprintf_r+0x1a0>
 8007484:	b360      	cbz	r0, 80074e0 <_vfiprintf_r+0x128>
 8007486:	e024      	b.n	80074d2 <_vfiprintf_r+0x11a>
 8007488:	4b50      	ldr	r3, [pc, #320]	; (80075cc <_vfiprintf_r+0x214>)
 800748a:	429c      	cmp	r4, r3
 800748c:	d101      	bne.n	8007492 <_vfiprintf_r+0xda>
 800748e:	68b4      	ldr	r4, [r6, #8]
 8007490:	e7a2      	b.n	80073d8 <_vfiprintf_r+0x20>
 8007492:	4b4f      	ldr	r3, [pc, #316]	; (80075d0 <_vfiprintf_r+0x218>)
 8007494:	429c      	cmp	r4, r3
 8007496:	bf08      	it	eq
 8007498:	68f4      	ldreq	r4, [r6, #12]
 800749a:	e79d      	b.n	80073d8 <_vfiprintf_r+0x20>
 800749c:	4621      	mov	r1, r4
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff fc6c 	bl	8006d7c <__swsetup_r>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d09d      	beq.n	80073e4 <_vfiprintf_r+0x2c>
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ac:	b01d      	add	sp, #116	; 0x74
 80074ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b2:	46a8      	mov	r8, r5
 80074b4:	e7a2      	b.n	80073fc <_vfiprintf_r+0x44>
 80074b6:	4a44      	ldr	r2, [pc, #272]	; (80075c8 <_vfiprintf_r+0x210>)
 80074b8:	1a80      	subs	r0, r0, r2
 80074ba:	fa0b f000 	lsl.w	r0, fp, r0
 80074be:	4318      	orrs	r0, r3
 80074c0:	9004      	str	r0, [sp, #16]
 80074c2:	4645      	mov	r5, r8
 80074c4:	e7be      	b.n	8007444 <_vfiprintf_r+0x8c>
 80074c6:	9a03      	ldr	r2, [sp, #12]
 80074c8:	1d11      	adds	r1, r2, #4
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	9103      	str	r1, [sp, #12]
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	db01      	blt.n	80074d6 <_vfiprintf_r+0x11e>
 80074d2:	9207      	str	r2, [sp, #28]
 80074d4:	e004      	b.n	80074e0 <_vfiprintf_r+0x128>
 80074d6:	4252      	negs	r2, r2
 80074d8:	f043 0302 	orr.w	r3, r3, #2
 80074dc:	9207      	str	r2, [sp, #28]
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	f898 3000 	ldrb.w	r3, [r8]
 80074e4:	2b2e      	cmp	r3, #46	; 0x2e
 80074e6:	d10e      	bne.n	8007506 <_vfiprintf_r+0x14e>
 80074e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80074ec:	2b2a      	cmp	r3, #42	; 0x2a
 80074ee:	d138      	bne.n	8007562 <_vfiprintf_r+0x1aa>
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	1d1a      	adds	r2, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	9203      	str	r2, [sp, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bfb8      	it	lt
 80074fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007500:	f108 0802 	add.w	r8, r8, #2
 8007504:	9305      	str	r3, [sp, #20]
 8007506:	4d33      	ldr	r5, [pc, #204]	; (80075d4 <_vfiprintf_r+0x21c>)
 8007508:	f898 1000 	ldrb.w	r1, [r8]
 800750c:	2203      	movs	r2, #3
 800750e:	4628      	mov	r0, r5
 8007510:	f7f8 fe66 	bl	80001e0 <memchr>
 8007514:	b140      	cbz	r0, 8007528 <_vfiprintf_r+0x170>
 8007516:	2340      	movs	r3, #64	; 0x40
 8007518:	1b40      	subs	r0, r0, r5
 800751a:	fa03 f000 	lsl.w	r0, r3, r0
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	4303      	orrs	r3, r0
 8007522:	f108 0801 	add.w	r8, r8, #1
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	f898 1000 	ldrb.w	r1, [r8]
 800752c:	482a      	ldr	r0, [pc, #168]	; (80075d8 <_vfiprintf_r+0x220>)
 800752e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007532:	2206      	movs	r2, #6
 8007534:	f108 0701 	add.w	r7, r8, #1
 8007538:	f7f8 fe52 	bl	80001e0 <memchr>
 800753c:	2800      	cmp	r0, #0
 800753e:	d037      	beq.n	80075b0 <_vfiprintf_r+0x1f8>
 8007540:	4b26      	ldr	r3, [pc, #152]	; (80075dc <_vfiprintf_r+0x224>)
 8007542:	bb1b      	cbnz	r3, 800758c <_vfiprintf_r+0x1d4>
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	3307      	adds	r3, #7
 8007548:	f023 0307 	bic.w	r3, r3, #7
 800754c:	3308      	adds	r3, #8
 800754e:	9303      	str	r3, [sp, #12]
 8007550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007552:	444b      	add	r3, r9
 8007554:	9309      	str	r3, [sp, #36]	; 0x24
 8007556:	e750      	b.n	80073fa <_vfiprintf_r+0x42>
 8007558:	fb05 3202 	mla	r2, r5, r2, r3
 800755c:	2001      	movs	r0, #1
 800755e:	4688      	mov	r8, r1
 8007560:	e78a      	b.n	8007478 <_vfiprintf_r+0xc0>
 8007562:	2300      	movs	r3, #0
 8007564:	f108 0801 	add.w	r8, r8, #1
 8007568:	9305      	str	r3, [sp, #20]
 800756a:	4619      	mov	r1, r3
 800756c:	250a      	movs	r5, #10
 800756e:	4640      	mov	r0, r8
 8007570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007574:	3a30      	subs	r2, #48	; 0x30
 8007576:	2a09      	cmp	r2, #9
 8007578:	d903      	bls.n	8007582 <_vfiprintf_r+0x1ca>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0c3      	beq.n	8007506 <_vfiprintf_r+0x14e>
 800757e:	9105      	str	r1, [sp, #20]
 8007580:	e7c1      	b.n	8007506 <_vfiprintf_r+0x14e>
 8007582:	fb05 2101 	mla	r1, r5, r1, r2
 8007586:	2301      	movs	r3, #1
 8007588:	4680      	mov	r8, r0
 800758a:	e7f0      	b.n	800756e <_vfiprintf_r+0x1b6>
 800758c:	ab03      	add	r3, sp, #12
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	4622      	mov	r2, r4
 8007592:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <_vfiprintf_r+0x228>)
 8007594:	a904      	add	r1, sp, #16
 8007596:	4630      	mov	r0, r6
 8007598:	f3af 8000 	nop.w
 800759c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80075a0:	4681      	mov	r9, r0
 80075a2:	d1d5      	bne.n	8007550 <_vfiprintf_r+0x198>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	065b      	lsls	r3, r3, #25
 80075a8:	f53f af7e 	bmi.w	80074a8 <_vfiprintf_r+0xf0>
 80075ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ae:	e77d      	b.n	80074ac <_vfiprintf_r+0xf4>
 80075b0:	ab03      	add	r3, sp, #12
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	4622      	mov	r2, r4
 80075b6:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <_vfiprintf_r+0x228>)
 80075b8:	a904      	add	r1, sp, #16
 80075ba:	4630      	mov	r0, r6
 80075bc:	f000 f888 	bl	80076d0 <_printf_i>
 80075c0:	e7ec      	b.n	800759c <_vfiprintf_r+0x1e4>
 80075c2:	bf00      	nop
 80075c4:	08007bfc 	.word	0x08007bfc
 80075c8:	08007c3c 	.word	0x08007c3c
 80075cc:	08007c1c 	.word	0x08007c1c
 80075d0:	08007bdc 	.word	0x08007bdc
 80075d4:	08007c42 	.word	0x08007c42
 80075d8:	08007c46 	.word	0x08007c46
 80075dc:	00000000 	.word	0x00000000
 80075e0:	08007393 	.word	0x08007393

080075e4 <_printf_common>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	4691      	mov	r9, r2
 80075ea:	461f      	mov	r7, r3
 80075ec:	688a      	ldr	r2, [r1, #8]
 80075ee:	690b      	ldr	r3, [r1, #16]
 80075f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	bfb8      	it	lt
 80075f8:	4613      	movlt	r3, r2
 80075fa:	f8c9 3000 	str.w	r3, [r9]
 80075fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007602:	4606      	mov	r6, r0
 8007604:	460c      	mov	r4, r1
 8007606:	b112      	cbz	r2, 800760e <_printf_common+0x2a>
 8007608:	3301      	adds	r3, #1
 800760a:	f8c9 3000 	str.w	r3, [r9]
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	0699      	lsls	r1, r3, #26
 8007612:	bf42      	ittt	mi
 8007614:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007618:	3302      	addmi	r3, #2
 800761a:	f8c9 3000 	strmi.w	r3, [r9]
 800761e:	6825      	ldr	r5, [r4, #0]
 8007620:	f015 0506 	ands.w	r5, r5, #6
 8007624:	d107      	bne.n	8007636 <_printf_common+0x52>
 8007626:	f104 0a19 	add.w	sl, r4, #25
 800762a:	68e3      	ldr	r3, [r4, #12]
 800762c:	f8d9 2000 	ldr.w	r2, [r9]
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	42ab      	cmp	r3, r5
 8007634:	dc28      	bgt.n	8007688 <_printf_common+0xa4>
 8007636:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	3300      	adds	r3, #0
 800763e:	bf18      	it	ne
 8007640:	2301      	movne	r3, #1
 8007642:	0692      	lsls	r2, r2, #26
 8007644:	d42d      	bmi.n	80076a2 <_printf_common+0xbe>
 8007646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800764a:	4639      	mov	r1, r7
 800764c:	4630      	mov	r0, r6
 800764e:	47c0      	blx	r8
 8007650:	3001      	adds	r0, #1
 8007652:	d020      	beq.n	8007696 <_printf_common+0xb2>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	68e5      	ldr	r5, [r4, #12]
 8007658:	f8d9 2000 	ldr.w	r2, [r9]
 800765c:	f003 0306 	and.w	r3, r3, #6
 8007660:	2b04      	cmp	r3, #4
 8007662:	bf08      	it	eq
 8007664:	1aad      	subeq	r5, r5, r2
 8007666:	68a3      	ldr	r3, [r4, #8]
 8007668:	6922      	ldr	r2, [r4, #16]
 800766a:	bf0c      	ite	eq
 800766c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007670:	2500      	movne	r5, #0
 8007672:	4293      	cmp	r3, r2
 8007674:	bfc4      	itt	gt
 8007676:	1a9b      	subgt	r3, r3, r2
 8007678:	18ed      	addgt	r5, r5, r3
 800767a:	f04f 0900 	mov.w	r9, #0
 800767e:	341a      	adds	r4, #26
 8007680:	454d      	cmp	r5, r9
 8007682:	d11a      	bne.n	80076ba <_printf_common+0xd6>
 8007684:	2000      	movs	r0, #0
 8007686:	e008      	b.n	800769a <_printf_common+0xb6>
 8007688:	2301      	movs	r3, #1
 800768a:	4652      	mov	r2, sl
 800768c:	4639      	mov	r1, r7
 800768e:	4630      	mov	r0, r6
 8007690:	47c0      	blx	r8
 8007692:	3001      	adds	r0, #1
 8007694:	d103      	bne.n	800769e <_printf_common+0xba>
 8007696:	f04f 30ff 	mov.w	r0, #4294967295
 800769a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769e:	3501      	adds	r5, #1
 80076a0:	e7c3      	b.n	800762a <_printf_common+0x46>
 80076a2:	18e1      	adds	r1, r4, r3
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	2030      	movs	r0, #48	; 0x30
 80076a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076ac:	4422      	add	r2, r4
 80076ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076b6:	3302      	adds	r3, #2
 80076b8:	e7c5      	b.n	8007646 <_printf_common+0x62>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4622      	mov	r2, r4
 80076be:	4639      	mov	r1, r7
 80076c0:	4630      	mov	r0, r6
 80076c2:	47c0      	blx	r8
 80076c4:	3001      	adds	r0, #1
 80076c6:	d0e6      	beq.n	8007696 <_printf_common+0xb2>
 80076c8:	f109 0901 	add.w	r9, r9, #1
 80076cc:	e7d8      	b.n	8007680 <_printf_common+0x9c>
	...

080076d0 <_printf_i>:
 80076d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80076d8:	460c      	mov	r4, r1
 80076da:	7e09      	ldrb	r1, [r1, #24]
 80076dc:	b085      	sub	sp, #20
 80076de:	296e      	cmp	r1, #110	; 0x6e
 80076e0:	4617      	mov	r7, r2
 80076e2:	4606      	mov	r6, r0
 80076e4:	4698      	mov	r8, r3
 80076e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076e8:	f000 80b3 	beq.w	8007852 <_printf_i+0x182>
 80076ec:	d822      	bhi.n	8007734 <_printf_i+0x64>
 80076ee:	2963      	cmp	r1, #99	; 0x63
 80076f0:	d036      	beq.n	8007760 <_printf_i+0x90>
 80076f2:	d80a      	bhi.n	800770a <_printf_i+0x3a>
 80076f4:	2900      	cmp	r1, #0
 80076f6:	f000 80b9 	beq.w	800786c <_printf_i+0x19c>
 80076fa:	2958      	cmp	r1, #88	; 0x58
 80076fc:	f000 8083 	beq.w	8007806 <_printf_i+0x136>
 8007700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007704:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007708:	e032      	b.n	8007770 <_printf_i+0xa0>
 800770a:	2964      	cmp	r1, #100	; 0x64
 800770c:	d001      	beq.n	8007712 <_printf_i+0x42>
 800770e:	2969      	cmp	r1, #105	; 0x69
 8007710:	d1f6      	bne.n	8007700 <_printf_i+0x30>
 8007712:	6820      	ldr	r0, [r4, #0]
 8007714:	6813      	ldr	r3, [r2, #0]
 8007716:	0605      	lsls	r5, r0, #24
 8007718:	f103 0104 	add.w	r1, r3, #4
 800771c:	d52a      	bpl.n	8007774 <_printf_i+0xa4>
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6011      	str	r1, [r2, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	da03      	bge.n	800772e <_printf_i+0x5e>
 8007726:	222d      	movs	r2, #45	; 0x2d
 8007728:	425b      	negs	r3, r3
 800772a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800772e:	486f      	ldr	r0, [pc, #444]	; (80078ec <_printf_i+0x21c>)
 8007730:	220a      	movs	r2, #10
 8007732:	e039      	b.n	80077a8 <_printf_i+0xd8>
 8007734:	2973      	cmp	r1, #115	; 0x73
 8007736:	f000 809d 	beq.w	8007874 <_printf_i+0x1a4>
 800773a:	d808      	bhi.n	800774e <_printf_i+0x7e>
 800773c:	296f      	cmp	r1, #111	; 0x6f
 800773e:	d020      	beq.n	8007782 <_printf_i+0xb2>
 8007740:	2970      	cmp	r1, #112	; 0x70
 8007742:	d1dd      	bne.n	8007700 <_printf_i+0x30>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	f043 0320 	orr.w	r3, r3, #32
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	e003      	b.n	8007756 <_printf_i+0x86>
 800774e:	2975      	cmp	r1, #117	; 0x75
 8007750:	d017      	beq.n	8007782 <_printf_i+0xb2>
 8007752:	2978      	cmp	r1, #120	; 0x78
 8007754:	d1d4      	bne.n	8007700 <_printf_i+0x30>
 8007756:	2378      	movs	r3, #120	; 0x78
 8007758:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800775c:	4864      	ldr	r0, [pc, #400]	; (80078f0 <_printf_i+0x220>)
 800775e:	e055      	b.n	800780c <_printf_i+0x13c>
 8007760:	6813      	ldr	r3, [r2, #0]
 8007762:	1d19      	adds	r1, r3, #4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6011      	str	r1, [r2, #0]
 8007768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800776c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007770:	2301      	movs	r3, #1
 8007772:	e08c      	b.n	800788e <_printf_i+0x1be>
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6011      	str	r1, [r2, #0]
 8007778:	f010 0f40 	tst.w	r0, #64	; 0x40
 800777c:	bf18      	it	ne
 800777e:	b21b      	sxthne	r3, r3
 8007780:	e7cf      	b.n	8007722 <_printf_i+0x52>
 8007782:	6813      	ldr	r3, [r2, #0]
 8007784:	6825      	ldr	r5, [r4, #0]
 8007786:	1d18      	adds	r0, r3, #4
 8007788:	6010      	str	r0, [r2, #0]
 800778a:	0628      	lsls	r0, r5, #24
 800778c:	d501      	bpl.n	8007792 <_printf_i+0xc2>
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	e002      	b.n	8007798 <_printf_i+0xc8>
 8007792:	0668      	lsls	r0, r5, #25
 8007794:	d5fb      	bpl.n	800778e <_printf_i+0xbe>
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	4854      	ldr	r0, [pc, #336]	; (80078ec <_printf_i+0x21c>)
 800779a:	296f      	cmp	r1, #111	; 0x6f
 800779c:	bf14      	ite	ne
 800779e:	220a      	movne	r2, #10
 80077a0:	2208      	moveq	r2, #8
 80077a2:	2100      	movs	r1, #0
 80077a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077a8:	6865      	ldr	r5, [r4, #4]
 80077aa:	60a5      	str	r5, [r4, #8]
 80077ac:	2d00      	cmp	r5, #0
 80077ae:	f2c0 8095 	blt.w	80078dc <_printf_i+0x20c>
 80077b2:	6821      	ldr	r1, [r4, #0]
 80077b4:	f021 0104 	bic.w	r1, r1, #4
 80077b8:	6021      	str	r1, [r4, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d13d      	bne.n	800783a <_printf_i+0x16a>
 80077be:	2d00      	cmp	r5, #0
 80077c0:	f040 808e 	bne.w	80078e0 <_printf_i+0x210>
 80077c4:	4665      	mov	r5, ip
 80077c6:	2a08      	cmp	r2, #8
 80077c8:	d10b      	bne.n	80077e2 <_printf_i+0x112>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	07db      	lsls	r3, r3, #31
 80077ce:	d508      	bpl.n	80077e2 <_printf_i+0x112>
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	6862      	ldr	r2, [r4, #4]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	bfde      	ittt	le
 80077d8:	2330      	movle	r3, #48	; 0x30
 80077da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077e2:	ebac 0305 	sub.w	r3, ip, r5
 80077e6:	6123      	str	r3, [r4, #16]
 80077e8:	f8cd 8000 	str.w	r8, [sp]
 80077ec:	463b      	mov	r3, r7
 80077ee:	aa03      	add	r2, sp, #12
 80077f0:	4621      	mov	r1, r4
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7ff fef6 	bl	80075e4 <_printf_common>
 80077f8:	3001      	adds	r0, #1
 80077fa:	d14d      	bne.n	8007898 <_printf_i+0x1c8>
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	b005      	add	sp, #20
 8007802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007806:	4839      	ldr	r0, [pc, #228]	; (80078ec <_printf_i+0x21c>)
 8007808:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800780c:	6813      	ldr	r3, [r2, #0]
 800780e:	6821      	ldr	r1, [r4, #0]
 8007810:	1d1d      	adds	r5, r3, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6015      	str	r5, [r2, #0]
 8007816:	060a      	lsls	r2, r1, #24
 8007818:	d50b      	bpl.n	8007832 <_printf_i+0x162>
 800781a:	07ca      	lsls	r2, r1, #31
 800781c:	bf44      	itt	mi
 800781e:	f041 0120 	orrmi.w	r1, r1, #32
 8007822:	6021      	strmi	r1, [r4, #0]
 8007824:	b91b      	cbnz	r3, 800782e <_printf_i+0x15e>
 8007826:	6822      	ldr	r2, [r4, #0]
 8007828:	f022 0220 	bic.w	r2, r2, #32
 800782c:	6022      	str	r2, [r4, #0]
 800782e:	2210      	movs	r2, #16
 8007830:	e7b7      	b.n	80077a2 <_printf_i+0xd2>
 8007832:	064d      	lsls	r5, r1, #25
 8007834:	bf48      	it	mi
 8007836:	b29b      	uxthmi	r3, r3
 8007838:	e7ef      	b.n	800781a <_printf_i+0x14a>
 800783a:	4665      	mov	r5, ip
 800783c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007840:	fb02 3311 	mls	r3, r2, r1, r3
 8007844:	5cc3      	ldrb	r3, [r0, r3]
 8007846:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800784a:	460b      	mov	r3, r1
 800784c:	2900      	cmp	r1, #0
 800784e:	d1f5      	bne.n	800783c <_printf_i+0x16c>
 8007850:	e7b9      	b.n	80077c6 <_printf_i+0xf6>
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	6961      	ldr	r1, [r4, #20]
 8007858:	1d18      	adds	r0, r3, #4
 800785a:	6010      	str	r0, [r2, #0]
 800785c:	0628      	lsls	r0, r5, #24
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	d501      	bpl.n	8007866 <_printf_i+0x196>
 8007862:	6019      	str	r1, [r3, #0]
 8007864:	e002      	b.n	800786c <_printf_i+0x19c>
 8007866:	066a      	lsls	r2, r5, #25
 8007868:	d5fb      	bpl.n	8007862 <_printf_i+0x192>
 800786a:	8019      	strh	r1, [r3, #0]
 800786c:	2300      	movs	r3, #0
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	4665      	mov	r5, ip
 8007872:	e7b9      	b.n	80077e8 <_printf_i+0x118>
 8007874:	6813      	ldr	r3, [r2, #0]
 8007876:	1d19      	adds	r1, r3, #4
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	681d      	ldr	r5, [r3, #0]
 800787c:	6862      	ldr	r2, [r4, #4]
 800787e:	2100      	movs	r1, #0
 8007880:	4628      	mov	r0, r5
 8007882:	f7f8 fcad 	bl	80001e0 <memchr>
 8007886:	b108      	cbz	r0, 800788c <_printf_i+0x1bc>
 8007888:	1b40      	subs	r0, r0, r5
 800788a:	6060      	str	r0, [r4, #4]
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	6123      	str	r3, [r4, #16]
 8007890:	2300      	movs	r3, #0
 8007892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007896:	e7a7      	b.n	80077e8 <_printf_i+0x118>
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	462a      	mov	r2, r5
 800789c:	4639      	mov	r1, r7
 800789e:	4630      	mov	r0, r6
 80078a0:	47c0      	blx	r8
 80078a2:	3001      	adds	r0, #1
 80078a4:	d0aa      	beq.n	80077fc <_printf_i+0x12c>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	079b      	lsls	r3, r3, #30
 80078aa:	d413      	bmi.n	80078d4 <_printf_i+0x204>
 80078ac:	68e0      	ldr	r0, [r4, #12]
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	4298      	cmp	r0, r3
 80078b2:	bfb8      	it	lt
 80078b4:	4618      	movlt	r0, r3
 80078b6:	e7a3      	b.n	8007800 <_printf_i+0x130>
 80078b8:	2301      	movs	r3, #1
 80078ba:	464a      	mov	r2, r9
 80078bc:	4639      	mov	r1, r7
 80078be:	4630      	mov	r0, r6
 80078c0:	47c0      	blx	r8
 80078c2:	3001      	adds	r0, #1
 80078c4:	d09a      	beq.n	80077fc <_printf_i+0x12c>
 80078c6:	3501      	adds	r5, #1
 80078c8:	68e3      	ldr	r3, [r4, #12]
 80078ca:	9a03      	ldr	r2, [sp, #12]
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	42ab      	cmp	r3, r5
 80078d0:	dcf2      	bgt.n	80078b8 <_printf_i+0x1e8>
 80078d2:	e7eb      	b.n	80078ac <_printf_i+0x1dc>
 80078d4:	2500      	movs	r5, #0
 80078d6:	f104 0919 	add.w	r9, r4, #25
 80078da:	e7f5      	b.n	80078c8 <_printf_i+0x1f8>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ac      	bne.n	800783a <_printf_i+0x16a>
 80078e0:	7803      	ldrb	r3, [r0, #0]
 80078e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078ea:	e76c      	b.n	80077c6 <_printf_i+0xf6>
 80078ec:	08007c4d 	.word	0x08007c4d
 80078f0:	08007c5e 	.word	0x08007c5e

080078f4 <_sbrk_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4c06      	ldr	r4, [pc, #24]	; (8007910 <_sbrk_r+0x1c>)
 80078f8:	2300      	movs	r3, #0
 80078fa:	4605      	mov	r5, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	f7f9 f8be 	bl	8000a80 <_sbrk>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_sbrk_r+0x1a>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	b103      	cbz	r3, 800790e <_sbrk_r+0x1a>
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	2000425c 	.word	0x2000425c

08007914 <__sread>:
 8007914:	b510      	push	{r4, lr}
 8007916:	460c      	mov	r4, r1
 8007918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791c:	f000 f896 	bl	8007a4c <_read_r>
 8007920:	2800      	cmp	r0, #0
 8007922:	bfab      	itete	ge
 8007924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007926:	89a3      	ldrhlt	r3, [r4, #12]
 8007928:	181b      	addge	r3, r3, r0
 800792a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800792e:	bfac      	ite	ge
 8007930:	6563      	strge	r3, [r4, #84]	; 0x54
 8007932:	81a3      	strhlt	r3, [r4, #12]
 8007934:	bd10      	pop	{r4, pc}

08007936 <__swrite>:
 8007936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793a:	461f      	mov	r7, r3
 800793c:	898b      	ldrh	r3, [r1, #12]
 800793e:	05db      	lsls	r3, r3, #23
 8007940:	4605      	mov	r5, r0
 8007942:	460c      	mov	r4, r1
 8007944:	4616      	mov	r6, r2
 8007946:	d505      	bpl.n	8007954 <__swrite+0x1e>
 8007948:	2302      	movs	r3, #2
 800794a:	2200      	movs	r2, #0
 800794c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007950:	f000 f868 	bl	8007a24 <_lseek_r>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800795a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800795e:	81a3      	strh	r3, [r4, #12]
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800796a:	f000 b817 	b.w	800799c <_write_r>

0800796e <__sseek>:
 800796e:	b510      	push	{r4, lr}
 8007970:	460c      	mov	r4, r1
 8007972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007976:	f000 f855 	bl	8007a24 <_lseek_r>
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	bf15      	itete	ne
 8007980:	6560      	strne	r0, [r4, #84]	; 0x54
 8007982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800798a:	81a3      	strheq	r3, [r4, #12]
 800798c:	bf18      	it	ne
 800798e:	81a3      	strhne	r3, [r4, #12]
 8007990:	bd10      	pop	{r4, pc}

08007992 <__sclose>:
 8007992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007996:	f000 b813 	b.w	80079c0 <_close_r>
	...

0800799c <_write_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4c07      	ldr	r4, [pc, #28]	; (80079bc <_write_r+0x20>)
 80079a0:	4605      	mov	r5, r0
 80079a2:	4608      	mov	r0, r1
 80079a4:	4611      	mov	r1, r2
 80079a6:	2200      	movs	r2, #0
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f7f9 f817 	bl	80009de <_write>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_write_r+0x1e>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_write_r+0x1e>
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	2000425c 	.word	0x2000425c

080079c0 <_close_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4c06      	ldr	r4, [pc, #24]	; (80079dc <_close_r+0x1c>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4605      	mov	r5, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	6023      	str	r3, [r4, #0]
 80079cc:	f7f9 f823 	bl	8000a16 <_close>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_close_r+0x1a>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	b103      	cbz	r3, 80079da <_close_r+0x1a>
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	2000425c 	.word	0x2000425c

080079e0 <_fstat_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4c07      	ldr	r4, [pc, #28]	; (8007a00 <_fstat_r+0x20>)
 80079e4:	2300      	movs	r3, #0
 80079e6:	4605      	mov	r5, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	f7f9 f81e 	bl	8000a2e <_fstat>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d102      	bne.n	80079fc <_fstat_r+0x1c>
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	b103      	cbz	r3, 80079fc <_fstat_r+0x1c>
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
 80079fe:	bf00      	nop
 8007a00:	2000425c 	.word	0x2000425c

08007a04 <_isatty_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4c06      	ldr	r4, [pc, #24]	; (8007a20 <_isatty_r+0x1c>)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	f7f9 f81d 	bl	8000a4e <_isatty>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_isatty_r+0x1a>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_isatty_r+0x1a>
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	2000425c 	.word	0x2000425c

08007a24 <_lseek_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4c07      	ldr	r4, [pc, #28]	; (8007a44 <_lseek_r+0x20>)
 8007a28:	4605      	mov	r5, r0
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	6022      	str	r2, [r4, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f7f9 f816 	bl	8000a64 <_lseek>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_lseek_r+0x1e>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_lseek_r+0x1e>
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	2000425c 	.word	0x2000425c

08007a48 <__malloc_lock>:
 8007a48:	4770      	bx	lr

08007a4a <__malloc_unlock>:
 8007a4a:	4770      	bx	lr

08007a4c <_read_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4c07      	ldr	r4, [pc, #28]	; (8007a6c <_read_r+0x20>)
 8007a50:	4605      	mov	r5, r0
 8007a52:	4608      	mov	r0, r1
 8007a54:	4611      	mov	r1, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f7f8 ffa2 	bl	80009a4 <_read>
 8007a60:	1c43      	adds	r3, r0, #1
 8007a62:	d102      	bne.n	8007a6a <_read_r+0x1e>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	b103      	cbz	r3, 8007a6a <_read_r+0x1e>
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
 8007a6c:	2000425c 	.word	0x2000425c

08007a70 <_init>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	bf00      	nop
 8007a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a76:	bc08      	pop	{r3}
 8007a78:	469e      	mov	lr, r3
 8007a7a:	4770      	bx	lr

08007a7c <_fini>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	bf00      	nop
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr
